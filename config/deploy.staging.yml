<% ENV["RAILS_ENV"] = "staging" %>
<% require_relative "config/application" %>

# Name of your application. Used to uniquely configure containers.
service: rubyvideo_staging

# Name of the container image.
image: adrienpoly/rubyvideo_staging

# Deploy to these servers.
servers:
  web:
    hosts:
      - 138.199.198.123

  job:
    hosts:
      - 138.199.198.123
    cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  hosts:
    - staging.rubyvideo.dev
    - staging2.rubyvideo.dev
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  app_port: 80

# Credentials for your image host.
registry:
  username: adrienpoly
  password:
    - KAMAL_REGISTRY_PASSWORD

env:
  clear:
    WEB_CONCURRENCY: 1
    RAILS_MAX_THREADS: 3
    RAILS_ENV: staging
  secret:
    - RAILS_MASTER_KEY
    - MEILI_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch:
    - amd64
  cache:
    type: gha
    options: mode=max
    image: rubyvideo-staging-build-cache
  secrets:
    - RAILS_MASTER_KEY

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.3.4
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY
# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
# accessories:
#   search:
#     image: getmeili/meilisearch:v1.10
#     host: 159.69.222.18
#     port: 7700
#     env:
#       clear:
#         MEILI_HTTP_ADDR: rubyvideo_staging-search:7700
#         MEILI_ENV: production
#         MEILI_DB_PATH: /rails/storage/meilisearch
#         MEILI_NO_ANALYTICS: true
#         MEILI_DUMP_DIR: /rails/storage/meilisearch/dumps
#         MEILI_MAX_INDEXING_MEMORY: 2Gb
#         MEILI_SNAPSHOT_DIR: /rails/storage/meilisearch/snapshots
#       secret:
#         - MEILI_MASTER_KEY
#     volumes:
#       - "storage:/rails/storage"

#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
accessories:
  litestream:
    roles: ["web"]
    image: litestream/litestream
    files: ["config/litestream.yml:/etc/litestream.yml"]
    volumes: ["storage:/rails/storage"]
    cmd: replicate
    env:
      secret:
        <% %w[BUCKET ENDPOINT ACCESS_KEY_ID SECRET_ACCESS_KEY].each do |secret| %>
        <% ENV["LITESTREAM_#{secret}"] = Rails.application.credentials.litestream.fetch(secret.downcase.to_sym) %>
        - LITESTREAM_<%= secret %>
        <% end %>
