---
- title: 'Panel: FP vs OOP'
  raw_title: Day 1 - FP vs OOP (fight)
  speakers:
    - Andrzej Krzywda
    - Piotr Zolnierek
    - Norbert Wójtowicz
    - Tymon Tobolski
    - Przemysław Kowalczyk
    - Jan Filipowski
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: q0BQMbwzPJw
  language:
  description: Andrzej Krzywda, Piotr Zolnierek, Norbert Wójtowicz, Tymon Tobolski, Przemysław Kowalczyk and Jan Filipowski

- title: 'Fishbowl: Programmer Productivity'
  raw_title: Day 1 - Programmer Productivity fishbowl
  speakers:
    - Michał Taszycki
    - Robert Pankowecki
    - Alex Koppel
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 2pmQk27i1PM
  language:
  description: Michał Taszycki, Robert Pankowecki and Alex Koppel

- title: Lightning Talks
  raw_title: Day 2 - Lightning Talks
  speakers:
    - Patrick Mulder
    - Lucas Reisig
    - Piotr Vestragowski
    - Tim Lossen
    - David Dahl
    - Bryan Helmkamp
    - Rafael Pestragis
    - Hubert Łępicki
    - Arve Brasseur
    - Piotr Włodarek
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: VO4tM5RcUlc
  language:
  description: ''

- title: A la carte, please!
  raw_title: Florian Gilcher - A la carte, please!
  speakers:
    - Florian Gilcher
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: tgHMLkMCvzs
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Rails is omakase. In other words: it opinionates on everything, tries to hide the efforts of composition and is hard to argue against by people that already picked the meal. As an (now) outsider to the Rails community, I am going to take the liberty of questioning those values. This talk explains why you should pick 'a la carte' instead of 'omakase' for programming and keep culinary habits where they belong: to the restaurant.

- title: Building a real-time analytics engine in JRuby
  raw_title: David Dahl - Building a real-time analytics engine in JRuby
  speakers:
    - David Dahl
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 7GMXFMIx48M
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    When most people hear big data real time analytics, they think huge enterprise systems and tools like Java, Oracle and so on. Thats not the case at Burt. We're building a real time ad analytics engine in Ruby, and we're handling tens of thousands of requests per second so far. Thanks to JRuby we can have the best of two worlds, the ease of developing with Ruby, and the robustness of the Java echosystem. In this talk you'll discover how we built a massive crunching pipeline using only virtual servers on AWS and free tools like JRuby, MongoDB, RabbitMQ, Redis, Cassandra and Nginx.

- title: 'Keynote: How to lie, cheat and steal'
  raw_title: Florian Plank - How to lie, cheat and steal
  speakers:
    - Florian Plank
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: fW-i7bbfdlQ
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Better browsers, more CPU cores, faster Javascript engines — performance on the client side has been improving rapidly over the past years. And with HTML5 web app developers now have more possibilities than ever to take advantage of all this power.

    Time to move some of the heavy lifting from the server to the client. Time to "lie, cheat, and steal", as Aaron Patterson put it in his RubyConf keynote.

    Experimentation is the foundation for this talk, so put on your lab coats. You might not want to put every bit of code you'll see into your production apps, but you may just get some new (and wild) ideas. Make the browser work for your (Rails) app!

- title: 'Panel: Single Page Applications Frameworks'
  raw_title: Single Page Applications Frameworks (fight)
  speakers:
    - Piotr Sarnacki
    - Andrzej Krzywda
    - Patrick Mulder
    - Adam Pohorecki
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: h8XeZFW1Ad0
  language:
  description: Piotr Sarnacki, Andrzej Krzywda, Patrick Mulder, Adam Pohorecki

- title: Dear God, what am I doing? Concurrency and parallel processing
  raw_title: Adam Hawkins - Dear God, what am I doing? Concurrency and parallel processing
  speakers:
    - Adam Hawkins
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 8pFJaEMMX6g
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Here's a situation we've all be in at one point. We have a program. We
    want to make that program faster. We know about threads, processes,
    fibers. Then you start programming and you have no clue what to do. I
    was there. It sucks. This talk guides you down the rabbit hole and
    brings out the other side.

    Points covered:
    Threads, Fibers
    Processes, Forking, Detaching
    Parellelism vs Concurrency
    The many many different ways I crashed my computer learning these things
    Gotchas of each
    Common ways you shoot yourself in the foot
    Celluoid

    This is a learning and informative talk. It's target at intermediate
    developers who have ruby experience but never written any multi threaded
    code.

- title: 'DCI != #extend && DCI != use case in code'
  raw_title: 'Rune Funch Søltoft - DCI != #extend && DCI != use case in code'
  speakers:
    - Rune Funch Søltoft
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: ZUADinlqHwk
  language:
  description: This video was recorded on http://wrocloverb.com. You should follow
    us at https://twitter.com/wrocloverb. See you next year!

- title: Topaz Ruby
  raw_title: Tim Felgentreff - Topaz Ruby
  speakers:
    - Tim Felgentreff
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: WS76YAUs1hg
  language:
  description: This video was recorded on http://wrocloverb.com. You should follow
    us at https://twitter.com/wrocloverb. See you next year!

- title: The Not-So-Big Software Design
  raw_title: Reginald Braithwaite - The Not-So-Big Software Design
  speakers:
    - Reginald Braithwaite
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: arsK-CN5YDg
  language:
  description: ''

- title: Lightning Talks
  raw_title: Day 3 - Lightning Talks
  speakers:
    - Tobias Pfeiffer
    - Steve Klabnik
    - Tomasz Wójcik
    - Zuz Wróżka
    - Norbert Wójtowicz
    - Parker Moore
    - Hubert Łępicki
    - Mateusz Lenik
    - Marcin Stecki
    - Tomasz Stachewicz
    - Michal Papis
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 6CZjK97dMTE
  language:
  description: ''

- title: Ports and Adapters architecture
  raw_title: Sławek Sobótka - Ports and Adapters architecture
  speakers:
    - Sławek Sobótka
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: _Js-GEqB-8I
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Ports and Adapters architecture is a synthesis of the modern software engineering.
    In its flexible Micro Kernel we will find a place for Domain Driven Design, Command-query Responsibility Segregation, Event Sourcing and plugins.
    Kernel is protected by hard shell of Ports, which provides testability, scalability and SOA-Ready strategy. However, the outer aura made of Adapters opens system for: multi-device capability, Event Driven Architecture, Rest and Saga.
    Everything is integrated within elegant "Hexagon" where there is "A place for everything and everything in its place".
    During the presentation, I'll encourage you to communicate and solve problems using visualizing techniques and your visual intelligence.

- title: 'Services and Rails: The Shit They Don''t Tell You'
  raw_title: 'Brian Morton - Services and Rails: The Shit They Don''t Tell You'
  speakers:
    - Brian Morton
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: A9rwSDMp-ls
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Building services and integrating them into Rails is hard. We want smaller Rails apps and nicely encapsulated services, but services introduce complexity. If you go overboard in the beginning, you're doing extra work and getting some of it wrong. If you wait too long, you've got a mess.

    At Yammer, we constantly clean up the mess that worked well in the early days, but has become troublesome to maintain and scale. We pull things out of the core Rails app, stand them up on their own, and make sure they work well and are fast. With 20+ services, we've learned some lessons along the way. Services that seem clean in the beginning can turn into development environment nightmares. Temporary double-dispatching solutions turn into developer confusion. Monitoring one app turns into monitoring a suite of apps and handling failure between them.

    This talk looks at our mistakes and solutions, the tradeoffs, and how we're able to keep moving quickly. Having services and a smaller Rails codebase makes for scalable development teams, happier engineers, and predictable production environments. Getting there is full of hard decisions -- sometimes we're right, sometimes we fuck it up, but we usually have a story to tell.

- title: Security, Secrets and Shenanigans
  raw_title: Richard Schneeman - Security, Secrets and Shenanigans
  speakers:
    - Richard Schneeman
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: mEXRqti0Ikw
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    zOMG Rails is insecure, PHP is insecure, Java is insecure - Everyone re-write everything in Haskell now! As much as coders love hating on languages and frameworks, the biggest security risk to you code is you. Come get a history of web security, and a live demo of security exploits. Then learn how to avoid them in your own code. You'll walk away with actionable steps to make your apps more safer, and a better understanding and appreciation of what being secure really means.

- title: 'Panel: Security'
  raw_title: Day 3 - Security Panel
  speakers:
    - Bryan Helmkamp
    - Piotr Niełacny
    - Richard Schneeman
    - Arne Brasseur
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: cqYKd6jPXKM
  language:
  description: Bryan Helmkamp, Piotr Niełacny, Richard Schneeman and Arne Brasseur

- title: Things you can't do in Ruby
  raw_title: Piotr Niełacny - Things you can't do in Ruby
  speakers:
    - Piotr Niełacny
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 0Q42jqP5qnE
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Ever since I learnt the Ruby language, I thought I can use it to programme virtually anything. Well, I was wrong and I'd like to share this sad story with all of you.

- title: OO Design and the history of philosophy
  raw_title: Steve Klabnik - OO Design and the history of philosophy
  speakers:
    - Steve Klabnik
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: 6WQ_1vcgS9c
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    Actions are driven by ideas, and ideas are driven by philosophy. For a
    deep understanding of our actions, we have to go the whole way back to
    the philosophy that motivates them. So what's the philosophical basis
    for Object Oriented Programming? In this talk, Steve will discuss
    Plato's theory of forms, its relationship to Object Oriented
    Programming, and its current relevance (or irrelevance) to modern
    philosophy.

- title: Refactoring Fat Models with Patterns
  raw_title: Bryan Helmkamp - Refactoring Fat Models with Patterns
  speakers:
    - Bryan Helmkamp
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: IqajIYxbPOI
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    "Fat models" cause maintenance issues in large apps. Only incrementally better than cluttering controllers with domain logic, they usually represent a failure to apply the Single Responsibility Principle (SRP). "Anything related to what a user does" is not a single responsibility.

    Early on, SRP is easier to apply. ActiveRecord classes handle persistence, associations and not much else. But bit-by-bit, they grow. Objects that are inherently responsible for persistence become the de facto owner of all business logic as well. And a year or two later you have a User class with over 500 lines of code, and hundreds of methods in it's public interface. Callback hell ensues.

    This talk will explore patterns to smoothly deal with increasing intrinsic complexity (read: features!) of your application. Transform fat models into a coordinated set of small, encapsulated objects working together in a veritable symphony.

- title: Embrace the static. Cherish the functional. Remain a Rubyist.
  raw_title: Jan Stępień - Embrace the static. Cherish the functional. Remain a Rubyist.
  speakers:
    - Jan Stępień
  event_name: wroc_love.rb 2013
  published_at: '2013-04-10'
  video_id: P6_illGY_00
  language:
  description: |-
    This video was recorded on http://wrocloverb.com. You should follow us at https://twitter.com/wrocloverb. See you next year!

    We, Rubists, are proud users of one of the most dynamic object oriented language in the industry. We juggle eigenclasses, modify methods at runtime, embrace duck typing and still tend to deliver working software. But there's more than our Ruby out there in the wild. Borders between functional and object-oriented paradigms and between dynamic and static languages aren't as thick as it seems. Several ideas adopted in Ruby originated from communities concentrated around functional languages. Similarly, various tools developed by Rubists are ported to fully static languages such as Haskell. It's hard to overstate benefits of this exchange of concepts. Don't get left behind; see how it can make you a better Rubist.
