## Day 1

- title: "Opening"
  raw_title: "[JA] Opening / Shintaro Kakutani"
  speakers:
    - Shintaro Kakutani
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-17"
  video_provider: not_recorded
  video_id: "shintaro-kakutani-rubykaigi-2013"
  language: japanese
  description: ""

- title: "The History of Ruby; 20th Anniversary Ed."
  raw_title: "[JA] The History of Ruby; 20th Anniversary Ed. / Masayoshi Takahashi"
  speakers:
    - Masayoshi Takahashi
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "67731254"
  language: japanese
  slides_url: https://www.slideshare.net/takahashim/the-history-of-ruby-20th-anniversary-ed
  description: |-
    The first session in RubyKaigi 2006, the first RubyKaigi, is "The History of Ruby." As re-booting of RubyKaigi, we'd like to take a look back over the history of Ruby and us again.

- title: "Keynote: How to create Ruby"
  raw_title: "[JA][Keynote] How to create Ruby / Yukihiro 'Matz' Matsumoto"
  speakers:
    - Yukihiro "Matz" Matsumoto
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "67807958"
  language: japanese
  description: |-
    Keynote given by Matz.

- title: "Identical Production, Staging and Development Environments Using Chef, AWS and Vagrant"
  raw_title: "[EN] Identical Production, Staging and Development Environments Using Chef, AWS and Vagrant / Christopher Rigor"
  speakers:
    - Christopher Rigor
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "67731302"
  language: english
  description: |-
    Learn how Engine Yard uses Amazon Web Services and Chef to bring up any number of servers ranging from a solo instance to a cluster of instances with multiple app instances, database instances and utility instances for memcached, resque, sphinx, and everything your app needs.

    Snapshots are used to create a clone of your production environment where you can test all the changes before making them in production.

    Vagrant and VirtualBox are used to provide a development environment with the same OS you use in production. Chef is used to install the same packages. In fact you use the same chef recipes everywhere.

- title: "Inside RubyMotion"
  raw_title: "[EN][JA] Inside RubyMotion / Laurent Sansonetti, Shizuo Fujita"
  speakers:
    - Laurent Sansonetti
    - Shizuo Fujita
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "67731482"
  language: japanese
  description: |-
    This talk will describe the internals of RubyMotion, a Ruby toolchain for iOS development. RubyMotion is different from CRuby in many ways and this session will focus on the technical differences and explain what makes RubyMotion unique.

- title: "Ruby Archaeology"
  raw_title: "[JA] Ruby Archaeology / Keiju Ishitsuka"
  speakers:
    - Keiju Ishitsuka
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-14"
  video_provider: vimeo
  video_id: "69688041"
  language: japanese
  description: |-
    I will unearth the early history of Ruby, from the night before it was born to day it was released to the world.

- title: "Ruby2.0 Reference Manual for japanese"
  raw_title: "[JA] Ruby2.0 Reference Manual for japanese / okkez"
  speakers:
    - okkez
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-04"
  video_provider: vimeo
  video_id: "69688043"
  language: japanese
  description: |-
    The work updating the Ruby Reference Manual (RuReMa) for Ruby 2.0 is done, so I'll report on that in my talk. In addition, there are a lot of people outside the project using the manual to do a variety of things, and I'd like to take this opportunity to thank them. I'll also talk about where we'd like to go in the future with the project.

- title: "The Future of JRuby?"
  raw_title: "[EN] The Future of JRuby? / Thomas E. Enebo, Charles O. Nutter"
  speakers:
    - Thomas E. Enebo
    - Charles O. Nutter
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-13"
  video_provider: vimeo
  video_id: "68301517"
  language: english
  description: |-
    JRuby is a fast, compliant Ruby implementation which can make use of many features of the Java platform. What more is there to do? Can it be made faster? Will it ever load faster? Any plans on making cross-implementation native C extension API?

    This presentation will answer questions like this and give some examples of exciting future projects involving JRuby. If you want a good insight into where JRuby is going then this talk is for you.

- title: "Ruby 'root'"
  raw_title: "[JA] Ruby 'root' / SHIBATA Hiroshi"
  speakers:
    - SHIBATA Hiroshi
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-06"
  video_provider: vimeo
  video_id: "67807964"
  language: japanese
  description: |-
    Ruby 'root' has all of permission in ruby development resources such as ruby-lang.org. I'll describe and introduce my work between Feb and Jun. and I'll announce some big news in RubyKaigi.

- title: "Two Legal Bodies about Ruby and its Projects"
  raw_title: "[JA] Two Legal Bodies about Ruby and its Projects / Ruby Association & Ruby-no-Kai"
  speakers:
    - Kazuyoshi Fukuda
    - Kenji Sugihara
    - Masayoshi Takahashi
    - Shintaro Kakutani
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-12"
  video_provider: vimeo
  video_id: "70184263"
  language: japanese
  description: |-
    - Part 1: Ruby Association
    Speaker: Kazuyoshi Fukuda, Kenji Sugihara

    - Part 2: Ruby-no-Kai
    Speaker: Masayoshi Takahashi, Shintaro Kakutani

    There are two legal bodies who support Rubyists in Japan; Ruby Association and Ruby-no-Kai. What are their activities? What is the difference between them? It's time to unveil them.

    https://rubykaigi.org/2013/talk/S52

- title: "TWO CARTOON FOXES: the _why documentary"
  raw_title: "[EN][JA] TWO CARTOON FOXES: the _why documentary (japanese Subtitled) / Kevin Triplett, Shintaro Kakutani"
  speakers:
    - Kevin Triplett
    - Shintaro Kakutani
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "TODO"
  video_provider: not_published
  video_id: the-why-documentary-rubykaigi-2013
  language: english
  description: |-
    In this short documentary film, we explore Ruby's beloved and mysterious character Why the Lucky Stiff (_why). Matz created Ruby and _why created his (poignant) Guide to Ruby, with musical soundtrack, to spread the Ruby love to people outside the Land of the Rising Sun. This documentary celebrates _why's art and features interviews with TenderLove, MeNTaLguY, Steve Klabnik, Flip, Geoffrey Grosenbach, and Matz. And rabbits and cartoon foxes.

    For Japanese: This film will play with Japanese subtitle <3

    https://rubykaigi.org/2013/talk/S51/

- title: "Toward efficient Ruby 2.1"
  raw_title: "[JA] Toward efficient Ruby 2.1 / Koichi Sasada"
  speakers:
    - Koichi Sasada
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-06"
  video_provider: vimeo
  video_id: "67807718"
  language: japanese
  description: |-
    In this presentation, I will show the ways to achieve more efficient Ruby 2.1 interpreter, the next release of CRuby/MRI. My talk will include VM/compilier optimizations, memory/object management and runtime libraries modification. Most of techniques and implementations may be work in progress.

    https://rubykaigi.org/2013/talk/S73

- title: "Ruby On Robots Using Artoo: A New Platform For Robotics, Physical Computing, and the Real World Web"
  raw_title: "[EN] Ruby On Robots Using Artoo: A New Platform For Robotics, Physical Computing, and the Real World Web / Ron Evans, Adrian Zankich"
  speakers:
    - Ron Evans
    - Adrian Zankich
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-04"
  video_provider: vimeo
  video_id: "69688042"
  language: english
  description: |-
    The robotics revolution has already begun. You can buy drones and robotic devices at local retail stores. Unfortunately, it’s hard to develop code for robots, and nearly impossible to create solutions that integrate multiple different kind of devices.

    Introducing Artoo, a new robotics framework written in Ruby. Artoo can communicate with many different kinds of hardware devices, and integrate them together. With surprisingly few lines of code, you can write interesting applications that tie together Arduinos, ARDrones, Spheros, and more.

    Artoo is based on Celluloid, giving it the ability to support the levels of concurrency that are required for industrial-strength robotic applications. Artoo has a built in API-server. This allows your robots to be controlled by external applications, or integrated into larger, more complex solutions.

    The time has come for Ruby-based robotics, and Artoo can help lead the way!

- title: "We Are Family"
  raw_title: "[EN] We Are Family / Danish Khan"
  speakers:
    - Danish Khan
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-04"
  video_provider: vimeo
  video_id: "69688044"
  language: english
  description: |-
    The traditional way of running a company has been documented by people from Harvard Business School and many other reputable institutions. If you do it differently you are considered to be in uncharted territory. I've started to notice that the new approaches companies like GitHub are taking to running a business are influenced a lot from the way families and family businesses are run.

    Becoming close with your coworkers and treating them like family helps foster innovation and creates an amazing culture where a variety of people can feel comfortable and enjoy themselves. Family members are honest with each other. Sometimes when someone critics you it can hurt, but when you know that it is backed with great respect and love you use it to help you become better.

    Having a great idea, creating useful products, and writing stellar code can be done by smart people. The difficult part is figuring out how to get tons of smart people to work well together. The social aspect is hard, but when you build a culture based off of values that are important to a family you'll see the amazing things that can be done.

- title: "`bundle install` Y U SO SLOW: Server Edition"
  raw_title: "[EN] `bundle install` Y U SO SLOW: Server Edition / Terence Lee"
  speakers:
    - Terence Lee
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-06"
  video_provider: vimeo
  video_id: "67807956"
  language: english
  description: |-
    If you've ever done anything in ruby, you've probably used rubygems.org to search or install your favorite gem. On October 17, 2012, rubygems.org went down. A Dependency API was built to be used by Bundler 1.1+ to speed up bundle install. Unfortunately, it was a bit too popular and the service caused too much load on the current infrastructure. In order to get rubygems.org back up the API had to be disabled.

    This talk will cover how we built a compatible API running on Heroku working with the rubygems.org team. We'll cover both how the API works and how Bundler uses it. Since this is a separate service, we had to start work towards a federated rubygems.org by building out a syncing service initially using just the rubygems indexes to keep our local cache up to date. We'll go over the sync code and how we've minimized the time between when you push a gem and it's available via the API.

    In order to keep the service up, we've taken productization steps like setting up on call rotations and instrumentation. We'll go over the tools and how we run the a volunteer OSS project.

    We've prototyped a replay service, to replay production traffic to different Heroku apps. With this and our instrumentation we were able to compare performance impact of different changes. We've used this data to guide our decision to change web servers from thin to unicorn. We're also keeping tabs on various setups including MRI 2 and JRuby under real production code and load. We'll go over how we've set this up and how it works on Heroku.

- title: "Refining refinements"
  raw_title: "[JA] Refining refinements / Shugo Maeda"
  speakers:
    - Shugo Maeda
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-06-14"
  video_provider: vimeo
  video_id: "71052100"
  language: japanese
  description: |-
    Refinements have been introduced in Ruby 2.0. However, they are experimental, and some of the features have been removed from Ruby 2.0.0. This talk explains the current features of Refinements, their limits, and how to refine Refinements themselves in Ruby 2.1.

- title: "You have to test multiple versions of your gem's dependencies. You used Appraisal. It's super affective!"
  raw_title: "[EN] You have to test multiple versions of your gem's dependencies. You used Appraisal. It's super affective! / Prem Sichanugrist"
  speakers:
    - Prem Sichanugrist
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-05"
  video_provider: vimeo
  video_id: "69748748"
  language: english
  description: |-
    So, it seems like you've finished writing your awesome gem. However, are you sure that your gem is working perfectly against multiple versions of its dependency? Are you sure that you didn't break any backward compatibility? In this talk, I'm going to show you the approach we have been taken to test our gems against multiple versions of dependencies, such as testing against Rails 3.2 and Rails 3.1. I'm also going to introduce you to our gem called "Appraisal" which helps you generating

    Gemfiles to be used with Bundler, and also guide it to running your test suite against those multiple Gemfiles. Lastly, I'm going to show you how you can config Travis CI to test your gem against those multiple versions of dependencies.

- title: "RubyJS"
  raw_title: "[EN] RubyJS / Sebastian Burkhard"
  speakers:
    - Sebastian Burkhard
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-05"
  video_provider: vimeo
  video_id: "69748750"
  language: english
  description: |-
    RubyJS is a JavaScript implementation of all methods from Ruby classes like Array, String, Numbers, Time and more.

    This talk will tell you how you can use RubyJS to stay sane when writing JavaScript. I'll show best practices, tips & tricks for daily use and how you can extend RubyJS with more methods and classes.

    https://rubykaigi.org/2013/talk/S27

- title: "Ruby Kaja 2013 / Community Appeal"
  raw_title: "[JA] Ruby Kaja 2013 / Community Appeal / Takeshi Yabe, Toshiaki Koshiba"
  speakers:
    - Takeshi Yabe
    - Toshiaki Koshiba
  event_name: RubyKaigi 2013
  date: "2013-05-30"
  published_at: "2013-07-25"
  video_provider: vimeo
  video_id: "71052214"
  language: japanese
  description: |-
    Kaja(冠者) is Japanese traditional word. Kaja means hopeful youngster. We use the word as newcomer hopeful rubyist.

    RubyKaja is Award of Rubyist for "shy" Japanese Rubyist. For the purpose of making a chance to praise each other, We have regional Rubyist communities elect active but "not famous" Rubyist, and We all honor them. In this talk, We announce and honor the Rubyists as RubyKaja 2013 and, introduce Rubyist communities which nominated for election RubyKaja.

    The Communities will appeals are:

    - Asakusa.rb
    - Hiroshima.rb
    - Kanazawa.rb
    - Okinawa.rb
    - Rails Girls Tokyo
    - Rails勉強会@東京
    - Ruby札幌
    - Shibuya.rb
    - Shinjuku.rb
    - Yokohama.rb
    - guRuby
    - toRuby
    - るびま編集コミュニティ
    - 西脇.rb & 東灘.rb

## Day 2

- title: "High Performance Rails"
  raw_title: "[JA] High Performance Rails / Issei Naruta"
  speakers:
    - Issei Naruta
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-14"
  video_provider: vimeo
  video_id: "68301518"
  language: japanese
  description: |-
    Why do websites tend to slow down day by day? Why do people say "Ruby on Rails is slow"? This presentation is the story that we Cookpad are fighting against the problems.

    We rewrote whole codes of Cookpad.com by Ruby on Rails in 2008. Since then we've been had an aim that we keep the average response time be under 200 ms.

    In this presentation, I'll introduce ways to make websites fast using Rails based on our experiences. And I'll talk about how engineers who are responsible for site's performance should work in their company.

- title: "Continuous gem dependency updating with Jenkins and Pull Request"
  raw_title: "[JA] Continuous gem dependency updating with Jenkins and Pull Request / Kensuke Nagae"
  speakers:
    - Kensuke Nagae
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-14"
  video_provider: vimeo
  video_id: "68300423"
  language: japanese
  description: |-
    In this talk, I will talk about the technique of saving labor of gem dependency updating by Jenkins CI and GitHub's pull request.

    Bundler will be used to manage the library in the web application development with Ruby these days. Bundler is a useful tool to intelligently manage the version and dependencies of the library. However, developers are so busy that they often forget or postpone the updating work. Moreover, sometimes developers might be not permitted to spend their time for these work by their boss.

    Presenter also fall into this situation, and experienced some troubles in the updating work for the first time in a long time.

    Analysis of the cause of the update work disruptions,

    Good habit which rely on the motivation of developers is easy to be damaged

    Work that has not been incorporated into the daily workflow would be forgotten

    Since the notification from email or IRC has not enough pressure, it is difficult to feel a sense of duty

    I've found that there is a problem.

    Therefore, to solve the problem I made a mechanism to make the updating work smoothly by Jenkins CI and GitHub's pull request. In this talk, I will talk about how I solved this problem, and compare this method to the similar ways.

- title: "krypt. semper pi."
  raw_title: "[EN] krypt. semper pi. / Martin Bosslet"
  speakers:
    - Martin Bosslet
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-14"
  video_provider: vimeo
  video_id: "68300345"
  language: english
  description: |-
    Many people don't like Cryptography. Whenever he falls out of a bar, he carries this strong odor of ivory-towering, bikeshedding and plain, outright arrogance. He seems to be a loner and a smartass, rude, and it's hard to follow his boring, lengthy explanations. But once you get to know him better, it actually turns out that he's really a nice guy. Sure, a little bit paranoid, but his intentions are pure and just. He'll probably never be your buddy on Facebook ('cause he likely won't set up an account in the first place), but over time you will realize that it can be quite pleasant having him around.

    krypt is the tool that tames him, and krypt is the tool that translates his sentences into plain, understandable Ruby. Gone are the times when you just couldn't figure out what parameters to use in order to please him, gone are the times when he would take your passwords and not stow them away safely because yet again he didn't fully understand what you were asking him to do.

    OK, this metaphor thing is getting a little old now. krypt makes using crypto fun and easy, and it works on all Rubies on all platforms (yep, Windows, too) - out of the box, no restrictions. It is about diversity - it allows you to choose from different providers that are best-suited for the particular task at hand. You'll get a whirlwind tour of how krypt is different than other crypto libraries and why. You'll find out about the finer pieces of its inner workings and you might take home a few tricks that evolved while developing the native extensions that sit at the very heart of krypt.

    With its recent integration into JRuby, you might already be using krypt with JRuby right now without even knowing. Learn about the details and how krypt is used to simulate OpenSSL features that were not available in JRuby before. Find out more about how it can help making Ruby a safer place. How it can help solving nasty problems such as signing our beloved gems for example.

    krypt tries to ultimately replace the OpenSSL extension in the Ruby standard library, and with our combined effort we could actually steer the story of Ruby cryptography towards a happy ending.

    Find out how!

- title: "Code Reading - Learning More about Ruby by Reading Ruby Source Code"
  raw_title: "[EN] Code Reading - Learning More about Ruby by Reading Ruby Source Code / Eddie Kao"
  speakers:
    - Eddie Kao
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-07-05"
  video_provider: vimeo
  video_id: "69748751"
  language: english
  description: ""

- title: "Security is hard, but we can’t go shopping"
  raw_title: "[EN] Security is hard, but we can’t go shopping / André Arko"
  speakers:
    - André Arko
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  slides_url: https://speakerdeck.com/indirect/security-is-hard-but-we-cant-go-shopping-rubykaigi-2013
  video_provider: vimeo
  video_id: "68464116"
  language: english
  description: |-
    The last few months have been pretty brutal for anyone who depends on Ruby libraries in production. Ruby is really popular now, and that’s exciting! But it also means that we are now square in the crosshairs of security researchers, whether whitehat, blackhat, or some other hat. Only the Ruby and Rails core teams have meaningful experience with vulnerabilites so far. It won’t last. Vulnerabilities are everywhere, and handling security issues responsibly is critical if we want Ruby (and Rubyists) to stay in high demand. Using Bundler’s first CVE as a case study, I’ll explain responsible disclosure for bugs you find, and repsonsible ownership of your own code. Don’t let your site get hacked, or worse yet, let your project allow someone else’s site to get hacked! Learn from the hard-won wisdom of the security community so that we won’t repeat the mistakes of others.

- title: "Ruby on Your Rails"
  raw_title: "[EN] Ruby on Your Rails / Akira Matsuda"
  speakers:
    - Akira Matsuda
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  slides_url: https://speakerdeck.com/a_matsuda/ruby-on-your-rails
  video_provider: vimeo
  video_id: "68464117"
  language: english
  description: |-
    My Rails are not like yours. I'm gonna tell you why and how.

- title: "Shrink to Grow"
  raw_title: "[EN] Shrink to Grow / Daniel Bovensiepen"
  speakers:
    - Daniel Bovensiepen
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-07-05"
  video_provider: vimeo
  video_id: "69748752"
  language: english
  description: |-
    Ruby has grown in the last 20 years. The feature-set and field of usage has increased. But also the code-size has reached an exceptional size. For many systems Ruby is nowadays to large.

    To reach new systems we have to re-think the way we implement Ruby. We have to shrink Ruby to be able to grow into a new field with an army of small devices.

    This talk will cover the development of mruby. The current state of the implementation and the reason why you should contribute to it.

- title: "Webruby: Now you can write your favorite Ruby code for the browser!"
  raw_title: '[EN] Webruby: Now you can write your favorite Ruby code for the browser! / Xuejie "Rafael" Xiao'
  speakers:
    - Xuejie "Rafael" Xiao
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-07-20"
  video_provider: vimeo
  video_id: "70673036"
  language: english
  description: |-
    Webruby uses emscripten to compile mruby, the lightweight Ruby implementation into pure JavaScript. This allows programmers to write Ruby code and run it in the browser. What's more, we also built a JavaScript calling interface from Webruby, and an OpenGL ES 2.0 binding. While naturally suited for building Web-based games, Webruby also provides an alternative for modern single-page applications without using JavaScript.

- title: "Keynote: Concurrency in Ruby: In search of inspiration"
  raw_title: "[EN][Keynote] Concurrency in Ruby: In search of inspiration / José Valim"
  speakers:
    - José Valim
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "68259585"
  language: english
  description: |-
    Concurrency has been a popular topic in the programming community in the last decade and has received special attention in the Ruby community in recent years. José Valim will start his talk by explaining why concurrency has become so important and why it is particularly hard to write safe concurrent software in Ruby, based on his experience from working on Ruby on Rails. The goal of this talk is to highlight the current limitations and start the search for possible solutions, looking at how other languages are tackling this issue today.

- title: "Concerning `Applications`"
  raw_title: "[JA] Concerning `Applications` / moro, Kyosuke MOROHASHI"
  speakers:
    - moro
    - Kyosuke MOROHASHI
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-18"
  video_provider: vimeo
  video_id: "68611166"
  language: japanese
  description: |-
    In recent years, as Rails has been used in more and more contexts and applied to increasingly complex real-life problems, Rails applications themselves have become more complex. As a result, the so-called Rails "model" has become bloated and complex. The question of how to deal with this bloat currently occupies the mind of many Rails users.

    A variety of approaches have been proposed as solutions to this problem. One of these is a technique by which model behavior is divided into small units called "Concerns", such that the size of individual classes (whose source code we have to maintain) can be minimized. (In Rails 4, the framework conventions make this easier to do.)

    Starting with Rails 3, I have applied this technique to a number of practical applications. In the process, I have struggled and learned many lessons about how to extract code into concerns, how to test such concerns, and what level of metaprogramming to use. In this talk I'd like to share some of these lessons with you.

- title: "Refactoring Fat Models with Patterns"
  raw_title: "[EN] Refactoring Fat Models with Patterns / Bryan Helmkamp"
  speakers:
    - Bryan Helmkamp
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "68611168"
  language: english
  description: |-
    "Fat models" cause maintenance issues in large apps. Only incrementally better than cluttering controllers with domain logic, they usually represent a failure to apply the Single Responsibility Principle (SRP). “Anything related to what a user does” is not a single responsibility.

    Early on, SRP is easier to apply. ActiveRecord classes handle persistence, associations and not much else. But bit-by-bit, they grow. Objects that are inherently responsible for persistence become the de facto owner of all business logic as well. And a year or two later you have a User class with over 500 lines of code, and hundreds of methods in it’s public interface. Callback hell ensues.

    This talk will explore patterns to smoothly deal with increasing intrinsic complexity (read: features!) of your application. Transform fat models into a coordinated set of small, encapsulated objects working together in a veritable symphony.

- title: "Ruby on Windows -- the past, the present, and the future"
  raw_title: "[JA] Ruby on Windows -- the past, the present, and the future / Usaku NAKAMURA"
  speakers:
    - Usaku NAKAMURA
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-07-20"
  video_provider: vimeo
  video_id: "70673037"
  language: japanese
  description: |-
    Introducing the efforts to the present and future directivity about Windows support of Ruby, and also introducing the truth of how Ruby can actually be used on Windows now.

- title: "How NougakuDo connect Windows Azure and Rails Application"
  raw_title: "[JA] How NougakuDo connect Windows Azure and Rails Application / Daisuke Inoue"
  speakers:
    - Daisuke Inoue
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "70673038"
  language: japanese
  description: |-
    Windows Azure is a Microsoft cloud platform not only for developers with .NET/C#, but also for developers with Ruby on Rails. Ruby on Rails Application can be hosted on Windows Azure Cloud Services (PaaS) with Nougakudo. In this talk, We'll introduce

    - What is Windows Azure Cloud Service
    - How NougakuDo connect Windows Azure and Rails Application
    - Case Study

- title: "Ruby's GC 2.0"
  raw_title: "[JA] Ruby's GC 2.0 / nari"
  speakers:
    - nari
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-18"
  video_provider: vimeo
  video_id: "68611167"
  language: japanese
  description: |-
    I will talk about some improvements of GC in Ruby 2.0.0. For instance, I will introduce about implementations of Bitmap Marking GC and so on, and show results of benchmarks after these are implemented.

- title: "CRuby Committers Who's Who in 2013"
  raw_title: "[JA] CRuby Committers Who's Who in 2013 / Tomoyuki Chikanaga"
  speakers:
    - Tomoyuki Chikanaga
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "68611165"
  language: japanese
  description: |-
    Everyday, the CRuby committers work hard to develop CRuby. And there are various services support the development of CRuby(MRI). In this talk, I will introduce the backyard of CRuby development.

- title: "Millions of Apps Deployed: What We've Learned"
  raw_title: "[EN] Millions of Apps Deployed: What We've Learned / Richard Schneeman"
  speakers:
    - Richard Schneeman
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "70673039"
  language: english
  description: |-
    Heroku has deployed over a million web apps. When you've run that many applications, it's hard not to notice when frameworks and developers do things wrong, and when they do them right. We've taken a look at the most common patterns and boiled down the best of our advice in to 12 simple factors that can help you build your next app to be stable, successful, and scalable. After this talk you'll walk away with in depth knowledge of web framework design patterns and practical examples of how to improve your application code.

- title: "Heroku Add-ons For Fun and Profit"
  raw_title: "[EN] Heroku Add-ons For Fun and Profit / Matthew Conway"
  speakers:
    - Matthew Conway
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "70673040"
  language: english
  description: |-
    For building today's web applications, our job is less about doing it all ourself, and often more about integrating the right services. This is how engineers build on Heroku, using any of the broad range of add-ons available to them. It's easy to build add-ons for this marketplace and provide the components for applications of the future. I'll show you how!

- title: "Lightning Talks"
  raw_title: "Lightning Talks"
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-21"
  video_provider: vimeo
  video_id: "68850145"
  language: japanese
  description: ""
  talks:
    - title: "Lightning Talks: Image resizing and cache Engine by Sinatra"
    raw_title: "Image resizing and cache Engine by Sinatra"
    speakers:
      - Chikahiro Tokoro
    event_name: RubyKaigi 2013
    date: "2013-05-31"
    published_at: "TODO"
    slides_url: https://speakerdeck.com/kibitan/rubykaigi-2013-lightning-talk-kibitan
    video_provider: youtube
    video_id: uN8F2wpnBnE
    language: english
    description: https://rubykaigi.org/2013/lightning_talks/#kibitan

- title: "Ruby Committers vs. the World"
  raw_title: "[JA] Ruby Committers vs. the World"
  speakers:
    - Ruby Committers
  event_name: RubyKaigi 2013
  date: "2013-05-31"
  published_at: "2013-06-17"
  video_provider: not_recorded
  video_id: ruby-committers-vs-the-world-rubykaigi-2023
  language: japanese
  description: ""

## Day 3

- title: "Async programming is all about programming synchronously"
  raw_title: "[JA] Async programming is all about programming synchronously / Masatoshi SEKI"
  speakers:
    - Masatoshi SEKI
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "68850149"
  language: japanese
  description: |-
    "dRuby is a failure."

    I resolved to give this talk after hearing these words from the authors of other libraries.

    In the talk I'll introduce some common asynchronous programming patterns and show how common themes in asynchronous programming are actually all about programming synchronously.

    I will also touch on asynchronous function calls in Ruby, the design philosophy of dRuby, and what Drip was aimed to solve.

    Target audiences:
    people with intermediate to advanced-level programming experience with high-level multiplexing languages that use select and TCP, such as Node.js, X11 and dRuby
    enthusiasts of Linda languages and actor-based models

- title: "If you do not enter the tiger's cave, you will not catch its cub: Objects, DCI, and Programming"
  raw_title: "[EN] If you do not enter the tiger's cave, you will not catch its cub: Objects, DCI, and Programming / Jim Gay"
  speakers:
    - Jim Gay
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-21"
  video_provider: vimeo
  video_id: "68850148"
  language: english
  description: |-
    As the responsibility of our applications grows, so too does our code. We'll walk through techniques of object-oriented programming that help clarify our intent and put responsibilities right where we need them.

- title: "From Rails to the web server to the browser"
  raw_title: "[EN] From Rails to the web server to the browser / David Padilla"
  speakers:
    - David Padilla
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-12"
  video_provider: vimeo
  video_id: "70184258"
  language: english
  description: |-
    Most of us know how to build beautiful web applications with Rails. With the help of templating tools like ERB and HAML our web apps create HTML documents, but, do you know exactly how those HTML documents end up in a browser?

    During this talk I will show you the bits that make it all happen. We will dissect the relevant code within Rails, Rack and the thin web server to discover exactly how the web server starts and listens to a TCP port, communicates with Rails and returns the HTML document that your browser parses.

    Why? Because we're curious about it, that's why.

- title: "Fewer Constraints, More Concurrency."
  raw_title: "[EN] Fewer Constraints, More Concurrency. / Ryan Smith"
  speakers:
    - Ryan Smith
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "68850147"
  language: english
  description: |-
    Traditional data structures like stacks and queues are strict - perhaps too strict. In this talk I will showcase some classical data structures and then provide alternative constraints that will allow our algorithms to achieve a greater level of concurrency. Examples will include a mix of Ruby and Postgres.

- title: "Rapid development of enterprise web apps with Netzke"
  raw_title: "[EN] Rapid development of enterprise web apps with Netzke / Max Gorin"
  speakers:
    - Max Gorin
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-26"
  video_provider: vimeo
  video_id: "69128205"
  language: english
  description: |-
    Netzke is a library that allows creating full-featured client-server GUI components - such as data grids, forms, windows, trees, etc - which then can be easily used as building blocks for complex enterprise applications. It uses Ruby on Rails at the server-side, and Sencha Ext JS in the browser. The choice of Ext JS provides for consistent look and feel, as well as for painless reusability of third-party Netzke components. Most importantly, Netzke allows for writing clean and highly maintainable code, which almost doesn't grow with the number of data models being used. After a brief introduction to the basics of Netzke design, some cool code will be shown from a fairly complex real-life web application, which will demonstrate a few highly practical aspects of Netzke.

- title: "Rails Gems realize RESTful modeling patterns"
  raw_title: "[JA] Rails Gems realize RESTful modeling patterns / Toru Kawamura"
  speakers:
    - Toru Kawamura
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-07-12"
  video_provider: vimeo
  video_id: "70184260"
  language: japanese
  description: |-
    Although it is not widely known, classic Rails gems such as Devise and Kaminari hide within them the RESTful resource modeling pattern. Using these gems encourages good resource design.

    Since 2.0, Rails has moved toward incorporating RESTful resource design. The RESTful architecture has become a part of Rails. One of the best examples of this are the resources in routes.rb, which provide the basic resource pattern for Rails applications. However, the world of practical applications is not ready for this RESTful side of Rails, and so when people actually develop applications, they hesitate about this aspect of RESTful resource design. It is here that these gems fill an essential gap.

    In this talk I will look at useful practical patterns adopted in such gems, and also introduce a gem currently under development which has the potential to play the role of a key missing piece.

- title: "The Origamist's Ruby: Folding better code"
  raw_title: "[EN] The Origamist's Ruby: Folding better code / Matthew Mongeau"
  speakers:
    - Matthew Mongeau
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-07-12"
  video_provider: vimeo
  video_id: "70184420"
  language: english
  description: |-
    Origami and the Ruby programming language have a lot more in common than having Japanese roots. This talk will make parallels between the two with the goal of presenting various techniques at becoming a better artist of code.

- title: "Be a library developer!"
  raw_title: "[JA] Be a library developer! / Kouhei Sutou"
  speakers:
    - Kouhei Sutou
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "69128203"
  language: japanese
  description: |-
    Is there a gem author around you? Did you meet any author of the gems used? Did you contact with any author of the gems used on the Internet?

    Do you think that "the author is cool!", "the author is awesome!" or "I respect the author!"? Do you want to be a gem author?

    This talk doesn't describe about how to create a gem because it is easy. "gem" is a package of Ruby library (, tool and so on) for easy to install. This talk describes about developing a library that is gem content.

    This talk is based on my experience as a library developer. This talk describes about how to write codes, how to write documents, release, support and mental set for a better "library developer". I hope that this talk is a trigger for increasing the number of better "library developers".

- title: "Beyond Ruby"
  raw_title: "[EN] Beyond Ruby / Konstantin Haase"
  speakers:
    - Konstantin Haase
  event_name: RubyKaigi 2013
  date: "2013-06-01"
  published_at: "2013-06-17"
  video_provider: vimeo
  video_id: "69128201"
  language: english
  description: |-
    Ruby is the most flexible language out there, imposing no limitations on the developers, giving all the expressiveness possible. Or so we think. But there are languages pushing dynamic features and expressiveness far beyond what is possible in Ruby. Some are old, like Lisp and Smalltalk, some are just emerging, purely experimental languages, like Ioke or Newspeak. In this talk, we will take a look at some of these languages and what they can do that Ruby can't. What does it mean, to be homoiconic? How does a language without keywords work? Can I dispatch in more than one direction? And what is partial evaluation?
