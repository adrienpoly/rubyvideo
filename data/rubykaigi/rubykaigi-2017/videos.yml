---
- title: Handling mails on a text editor
  raw_title: "[JA] Handling mails on a text editor / Shugo Maeda @shugomaeda"
  speakers:
    - Shugo Maeda
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: pvSOWiVB-KA
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/shugomaeda.html

    A text editor is perfect for mail handling because mails consist of text. Ruby is perfect for text editing because it's so powerful.

    In this talk, I introduce Textbringer, a text editor written in Ruby, and Mournmail, a message user agent implemented as a plugin of Textbringer, and I tells the fun of text editing and mail handling.

    I also talk about Law, Chaos, and the Cosmic Balance through the design and implementation of Textbringer and Mournmail.

- title: "Keynote: Making Ruby? ゆるふわRuby生活"
  raw_title: "[JA][Keynote] Making Ruby? ゆるふわRuby生活 / Nobuyoshi Nakada @n0kada"
  speakers:
    - Nobuyoshi Nakada
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: Bt-PvFLbMbU
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/n0kada.html

- title: Gemification for Ruby 2.5/3.0
  raw_title: "[JA] Gemification for Ruby 2.5/3.0 /  SHIBATA Hiroshi @hsbt"
  speakers:
    - SHIBATA Hiroshi
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: VKm93Mwe__k
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/hsbt.html

    Ruby have many libraries named standard library, extension and default gems, bundled gems. These are some differences under the bundler and rails application.

    default gems and bundled gems are introduced to resolve dependency problem and development ecosystem around the ruby core. We have the plan to promote default/bundled gems from standard libraries. It says “Gemification” projects.

    What Gemification changes in Ruby ecosystem? In this presentation, from the standpoint of the maintainer of the Ruby programming language, I will explain details of Gemification and its blocker things. Finally, I will also introduce the new features of Ruby 2.5 and 3.0.

- title: How to optimize Ruby internal.
  raw_title: "[JA] How to optimize Ruby internal. / Shizuo Fujita @watson1978"
  speakers:
    - Shizuo Fujita
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 4VOEdd-BYHE
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/watson1978.html

    "Ruby 3" has aimed to optimize performance which is one of goals to release. I have made some patches to optimize Ruby internal to realize it.

    This talk describes how optimized Ruby internal at Ruby 2.5.

- title: API Development in 2017
  raw_title: "[JA] API Development in 2017 / Takafumi ONAKA @onk"
  speakers:
    - Takafumi ONAKA
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: a28jJ62ZfZM
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/onk.html

    Summarize "How to develop API server efficiently."

    This talk will talk while looking back on the history like

    Why REST (RESTful API) was born?
    The world has became to need Native client / Web front-end
    API documentation tool are widely used
    API Blueprint, Swagger, RAML, JSON Hyper-Schema
    Schema driven development
    API Query Language (GraphQL)'s birth
    And I talk about the library concept and code that we implemented as necessary. There were many challenges such as how to communicate at the interface boundary, how to implement without any mistakes, etc.

- title: "Keynote: The Many Faces of Module"
  raw_title: '[JA][Keynote] The Many Faces of Module / Yukihiro "Matz" Matsumoto @yukihiro_matz'
  speakers:
    - Yukihiro "Matz" Matsumoto
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: OnDSm-GZCko
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/yukihiro_matz.html

- title: "Keynote: Towards Ruby 3x3 performance"
  raw_title: "[EN][Keynote] Towards Ruby 3x3 performance / Vladimir Makarov @vnmakarov"
  speakers:
    - Vladimir Makarov
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: qpZDw-p9yag
  language: English
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/vnmakarov.html

    Ruby 3x3 project has a very ambitious goal to improve MRI performance in 3 times in comparison with MRI version 2.0.

    This talk is about my attempt to achieve this goal in a project to implement RTL VM instructions and JIT in MRI VM. The project can be found on https://github.com/vnmakarov/ruby.

    We will talk about the project motivation, goals, and approaches, and the current state of the project. Performance comparison with JRuby, Graal/Truffle Ruby, and OMR Ruby and future directions of the project will be given too.

- title: Regular Expressions Inside Out
  raw_title: "[JA] Regular Expressions Inside Out / Martin J. Dürst @duerst"
  speakers:
    - Martin J. Dürst
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: sUdZ8s4GbnE
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/duerst.html

    Regular expressions are a very important part of the toolkit of every Ruby programmer. This talk will help improve your understanding of regular expressions, including how to use them from Ruby, and how they are implemented. Examples will include things Ruby can do but other programming languages can't, huge regular expressions, substitutions that change as we go, and performance improvements for future Ruby versions.

- title: What visually impaired programmers are thinking about Ruby?
  raw_title: "[JA] What visually impaired programmers are thinking about Ruby? / Takuya Nishimoto @nishimotz"
  speakers:
    - Takuya Nishimoto
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: O1coxtDTkwY
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/nishimotz.html

    Computer programming is an important job opportunity for visually impaired people. Several colleges are educating Ruby programming to such students in Japan and overseas. This talk reveals the current situations of visually impaired Ruby programmers, especially in Japan, i.e. what they are developing, which tools or environments they are using, and whether they are satisfied or not regarding the Ruby language. Accessibility of documents, which are generated from Ruby sources via rdoc or yard, is one of the issue I found so far.

- title: Introducing the Jet Programming Language
  raw_title: "[JA] Introducing the Jet Programming Language / Yasushi Itoh @i2y_"
  speakers:
    - Yasushi Itoh
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: SfF9va8NGhM
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/i2y_.html

    Jet is similar to Ruby and run on Erlang VM. In this talk, I will mainly explain the specification and implementation.

- title: Compiling Ruby
  raw_title: "[EN] Compiling Ruby / Kevin Deisz @kddeisz"
  speakers:
    - Kevin Newton
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: B3Uf-aHZwmw
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/kddeisz.html

    Since Ruby 2.3 and the introduction of RubyVM::InstructionSequence::load_iseq, we've been able to programmatically load ruby bytecode. By divorcing the process of running YARV byte code from the process of compiling ruby code, we can take advantage of the strengths of the ruby virtual machine while simultaneously reaping the benefits of a compiler such as macros, type checking, and instruction sequence optimizations. This can make our ruby faster and more readable! This talk demonstrates how to integrate this into your own workflows and the exciting possibilities this enables.

- title: Mapping your world with Ruby
  raw_title: "[EN] Mapping your world with Ruby / Mat Schaffer @matschaffer"
  speakers:
    - Mat Schaffer
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: Qk3VSCDZITs
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/matschaffer.html

    In the wake of the March 2011 earthquake, many noticed a lack of good environmental data regarding radiation. The Safecast project was born from that need and our Ruby-based infrastructure how is home to nearly 70 million data points.

    In this talk we'll go over the basics of the project, what we've learned over the last 6 years of running a volunteer-based Ruby project, and our plans for future expansion into tracking both radiation and air quality data.

- title: "I quit my job to write my own language: Goby"
  raw_title: "[EN] I quit my job to write my own language: Goby / Stan Lo @_st0012"
  speakers:
    - Stan Lo
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: GRNlTWzoC74
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/_st0012.html

    That day, for no particular reason, I decided to write my own language. So I followed a book and wrote the monkey. And when I wrote monkey, I thought maybe I'd create my own language. And when I created it, I thought maybe I'd just make it more like Ruby. And I figured, since I've spent so many time, maybe I'd just make it a VM-based language. And that's what I did. I wrote VM and compiler just like Ruby did in version 1.9. For no particular reason I just kept on going. I created file and http library. And when I made them, I figured, since I'd gone this far, I might as well add a web server. When I created the web server, I figured, since I'd gone this far, I might just quit my job and make it my own programming language: Goby

    For leanring more about Goby, please also checkout our Gitbook (constantly updated!)

- title: Ruby, Opal and WebAssembly
  raw_title: "[JA] Ruby, Opal and WebAssembly / Yutaka HARA @yhara"
  speakers:
    - Yutaka HARA
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: bNTajEO_ndA
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/yhara.html

    WebAssembly is a state-of-the-art technology to run CPU intensive calculation on the browser. So how does it relate to Ruby? Well, for instance, you would like to use it while writing browser games, with Ruby.

    In this talk, I will introduce DXOpal, a game programming framework for Opal (Ruby-to-JavaScript compiler). DXOpal takes advantage of WebAssembly for complex calculations like collision detection.

- title: Ruby for Distributed Storage System
  raw_title: '[JA] Ruby for Distributed Storage System / Satoshi "moris" Tagomori @tagomoris'
  speakers:
    - Satoshi "moris" Tagomori
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: KrWhhgWHTwE
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/tagomoris.html

    Storage systems is a big topic in distributed systems, which requires high stability, reliability and performance. There are many OSS distributed storage systems, but most of these are implemented in Java and other JVM languages (just some others are in C++, Riak, etc). An OSS distributed storage, bigdam-pool, is implemented both in Java and Ruby and I'm getting a benchmark score for both implementations. This talk will show the details of benchmark result, and what I learnt from this trial.

    - Providing HTTP API in a daemon
    - Serializing/Deserializing Data
    - Performance

- title: "Smalruby : The neat thing to connect Rubyists and Scratchers"
  raw_title: "[JA] Smalruby : The neat thing to connect Rubyists and Scratchers"
  speakers:
    - Kouji Takao
    - Nobuyuki Honda
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: U3pre3Bv9rk
  language: Japanese
  description: |-
    Kouji Takao @takaokouji, Nobuyuki Honda @nobyuki
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/takaokouji.html

    The Smalruby is a 2D game development library that aims to be compatible with Scratch (Scratch is most famous visual programming language: https://scratch.mit.edu/).

    Reacently, programming education for kids is expanding rapidly and Scratch is ususally a first-contact programming language for them. Some kids, good Scratchers, try to learn a text-based programming languege.

    Smalruby helps to make Scratcher Rubyist!

    This talk includes the following topics:
    - The recent situation of programming education for kids.
    - Smalruby's features.
    - Smalruby inside.

- title: "Progress of Ruby/Numo: Numerical Computing for Ruby"
  raw_title: "[JA] Progress of Ruby/Numo: Numerical Computing for Ruby / Masahiro TANAKA @masa16tanaka"
  speakers:
    - Masahiro TANAKA
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: qJ6YIfbTLGM
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/masa16tanaka.html

    In my view, the primary reason why Python has become popular in scientific computing is that Python has Numpy, a powerful tool for data processing and it serves as the basis of various libraries. As an equivalent to Numpy in Ruby, I have been developing NArray as I reported in RubyKaigi 2010. Now I am developing the new version of NArray as a library in Ruby/Numo (NUmerical MOdule). Currently Ruby/Numo contains interfaces to BLAS/LAPACK, GSL, FFTE, and Gnuplot. However, the development is far from complete and needs further effort. In this talk, I will report the progress of the Ruby/Numo project and discuss issues in scientific computing with Ruby.

- title: Serial Protocol Analyzer on Ruby
  raw_title: "[JA] Serial Protocol Analyzer on Ruby / Mayumi EMORI @emorima"
  speakers:
    - Mayumi EMORI
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: E6LpGzrYWRc
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/emorima.html

    It is easy to program serial communication on Ruby. (Thanks to greate useful gems.)
    However it is difficult to judge whether there is a problem in either the sending program or the receiving program if data received cannot be successfully. To solve the difficulty, let's analyze the data the sending program has written to the device.

    Rubyでシリアル通信プログラムを書くのは簡単だ。 しかしながら、正しくデータが受信できない場合に、送信側に問題があるのか、受信側に問題があるのかを判断するのが困難である。 その困難さを解決するために、送信プログラムがデバイスに書き込みしたデータをRubyで解析してみよう。

- title: mruby gateway for huge amount of realtime data processing
  raw_title: "[JA] mruby gateway for huge amount of realtime data processing / Ritta Narita @narittan"
  speakers:
    - Ritta Narita
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 7DuwISRyqGE
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/narittan.html

    TreasureData deals with huge amount of streaming data import request and saves them into our database in realtime without any lost. New scalable system is required to process requests increasing day by day, and I decided to replace old system with rails and fluentd to new system with h2o and mruby for gateway server.

    I'll introduce why h2o and mruby is good and how I optimized mruby server handler for the system. In addition, I'll talk about my patches for h2o to make it possible for mruby parallel processing/asynchronous processing. And also, I'll show benchmarks of actual product.

- title: Hanami - New Ruby Web Framework
  raw_title: "[EN] Hanami - New Ruby Web Framework / Anton Davydov @anton_davydov"
  speakers:
    - Anton Davydov
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: aYboQzyIoPc
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/anton_davydov.html

    The hanami is quite new and interesting framework which you are unlikely to write complex applications. But this does not mean that this framework is not worth your attention. Besides old approaches, you can also find new interesting solutions.

- title: C how to supercharge Ruby with Rubex
  raw_title: "[EN] C how to supercharge Ruby with Rubex / Sameer Deshmukh @v0dro"
  speakers:
    - Sameer Deshmukh
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: pZSuuyiQNZk
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/v0dro.html

    CRuby is still one of the most popular Ruby interpreters in use today, but it lacks speed. In this talk you will be introduced to Rubex - a new programming language that compiles to C, looks almost exactly like Ruby and is specifically designed for supercharging your Ruby code with minimal effort.

- title: Writing Lint for Ruby
  raw_title: "[JA] Writing Lint for Ruby / Masataka Kuwabara @p_ck_"
  speakers:
    - Masataka Kuwabara
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: xr3uDzQIuBA
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/p_ck_.html

    This talk describes how to write Lint for Ruby program.

    Lint finds bugs from code automatically. So, if you can write Lint, you can reduce bugs from your code automatically. This talk includes the following topics.

    - Implementation of existing Lint such as RuboCop and Reek.
    - How to create new Lint or add a new rule to existing Lint yourself.

- title: Ruby Parser In IRB 20th Anniversary...Now Let Time Resume
  raw_title: "[EN] Ruby Parser In IRB 20th Anniversary...Now Let Time Resume / ITOYANAGI Sakura @aycabta"
  speakers:
    - ITOYANAGI Sakura
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: fZGyXwiFNAo
  language: English
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/aycabta.html

    IRB has an internal Ruby code parser by pure Ruby. It's contributing greatly to some Ruby tools. A part of them is RDoc. RDoc uses forked Ruby parser of IRB. It is great works, but so legacy. The maintenance cost for new Ruby syntax continues to increase. For example, Ruby 2.1 supports new feature visibility def method definition, but RDoc supports it after Ruby 2.4.

    I provide a solution for it. After Ruby 1.9, Ripper is adopted as standard library. Ripper is a parser for Ruby code, it uses parse.y of CRuby in common. It's perfect for supporting latest Ruby syntax.

- title: Ruby in office time reboot
  raw_title: "[JA] Ruby in office time reboot / Kentaro Goto, ごとけん @gotoken"
  speakers:
    - Kentaro Goto
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: PAQwlSfRjko
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/gotoken.html

    I'll introduce some uses of Ruby in my everyday office hours. Various kind of tasks are helped by Ruby: data processing, scraping, excel sheet generation, Installation ruby, etc. This is a continuation of old my talk series: Shigoto de tsukau Ruby.

- title: Asynchronous and Non-Blocking IO with JRuby
  raw_title: "[EN] Asynchronous and Non-Blocking IO with JRuby / Joe Kutner @codefinger"
  speakers:
    - Joe Kutner
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: BB5z8cg2Hlc
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/codefinger.html

    Asynchronous and non-blocking IO yields higher throughput, lower resource usage, and more predictable behaviour under load. This programming model has become increasingly popular in recent years, but you don't need to use Node.js to see these benefits in your program. You can build asynchronous applications with JRuby. In this talk, we’ll look at libraries and patterns for doing high performance IO in Ruby.

- title: "Food, Wine and Machine Learning: Teaching a Bot to Taste"
  raw_title: "[EN] Food, Wine and Machine Learning: Teaching a Bot to Taste / Mai Nguyen @happywinebot"
  speakers:
    - Mai Nguyen
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: FP5Zxd5o_4M
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/happywinebot.html

    To use machine learning effectively, you have to understand its strengths, limitations and look for creative ways to apply it. Even if you are already familiar with machine learning, we can all learn more! Let me show you how I have used machine learning to build a bot that can suggest a wine to accompany your next meal.

- title: The Ruby Module Builder Pattern
  raw_title: "[EN] The Ruby Module Builder Pattern / Chris Salzberg / @shioyama"
  speakers:
    - Chris Salzberg
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: _E1yKPC-r1E
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/shioyama.html

    Did you know that Ruby has configurable modules? One of the most interesting features of Ruby, the Module Builder Pattern is also probably its least well-known. Simply subclass the Module class, dynamically define some methods in an initializer, and boom, you can create named, customizable modules to include in other classes. In this talk, I'll explain how I've leveraged this unique feature of Ruby to build a translation gem called Mobility that can handle a wide range of different storage strategies through a single, uniform interface.

- title: The Curious Case of Wikipedia Parsing
  raw_title: "[EN] The Curious Case of Wikipedia Parsing / Victor Shepelev @zverok"
  speakers:
    - Victor Shepelev
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: oqsX8kNq94I
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/zverok.html

    A case study of developing Wikipedia client/parser for structured information extraction, or How we are making entire world common knowledge information machine accessible (from Ruby). Includes investigation of parser development for semi-structured markup and semantic API design.

- title: Flor - hubristic interpreter
  raw_title: "[EN] Flor - hubristic interpreter / John Mettraux @jmettraux"
  speakers:
    - John Mettraux
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: gXep-LwPvw8
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/jmettraux.html

    Originally, the talk was named "I wanted to write less code". We all do. But I fell into a rabbit hole of languages and interpreters. This will be an exposé of my hubristic quest.

    Flor is a workflow engine, a remake of ruote, yet another celebration of the joy of programming in Ruby.

- title: Static Typo Checker in Ruby
  raw_title: "[EN] Static Typo Checker in Ruby / Yuki Nishijima @yuki24"
  speakers:
    - Yuki Nishijima
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: k9WEDRMvanM
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/yuki24.html

    Since 2.3.0, Ruby comes with a dynamic typo checker called the did_you_mean gem, which helps find a bug caused by a typo. However, there's one argument against its design: it runs a naming check at runtime.

    So what makes it difficult to implement a static typo checker? What are the technical challenges to build it? Is Type really necessary? In this talk, we'll discuss techniques for how to write a static typo checker by looking at examples that find an undefined method without running Ruby code. Join us to learn about the future of Ruby's typo checker.

- title: "Irb 20th anniversary memorial session: Reish and Irb2"
  raw_title: "[JA] Irb 20th anniversary memorial session: Reish and Irb2 / Keiju Ishitsuka @keiju"
  speakers:
    - Keiju Ishitsuka
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: mS7fBsBF_gg
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/keiju.html

    Irb has been born 20 years now.. To commemorate it I will talk about Reish and the next generation of Irb. Reish is an an unix shell for rubyist. It is a shell language that realize Ruby's feature. Also, it is an language which is metamorphosed from Ruby for more natural shell operation. Reish is under development. Reish is similar to Irb in usage, and various knowledge was gained in its development. I will introduce the vision of Irb next generation based on that.

    Irbは今年で生まれて20年になります. それを記念してReishとIrbの次世代の話をします. ReishはRubyistのためのshellで, Rubyの機能を実現しています. また, Ruby操作から自然にshell操作に変換可能な言語です. Reishは現在開発中です. ReishはIrbと使い方が似ていて, その開発からいろいろな知見を得ることができます。それを基にIrbの次世代の構想をお話しします.

- title: Pattern Matching in Ruby
  raw_title: "[EN] Pattern Matching in Ruby / YUKI TORII @yotii23"
  speakers:
    - YUKI TORII
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 1m4IPJH0k0E
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/yotii23.html

    Do you want pattern matching in Ruby? I want. It will make Ruby more elegant, more useful, and more comfortable. So in this talk, I'll propose a specification about pattern matching in Ruby and will show my implementation in parse.y (a part of them).

- title: How Close is Ruby 3x3 For Production Web Apps?
  raw_title: "[EN] How Close is Ruby 3x3 For Production Web Apps? / Noah Gibbs @codefolio"
  speakers:
    - Noah Gibbs
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: xZ5mw3x2pdo
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/codefolio.html

    How much faster is current Ruby than Ruby 2.0 for a production web application? Let's look at a mixed workload in the real commercial Discourse forum software. We'll see how the speed has changed overall. We'll also examine slow requests, garbage collection, warmup iterations and more. You'll see how to use this benchmark to test your own Ruby optimizations.

- title: dRuby on Browser
  raw_title: "[JA] dRuby on Browser / Yoh Osaki @youchan"
  speakers:
    - Yoh Osaki
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: Tgq5GhagmcU
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/youchan.html

    I implemented dRuby on Browser with Opal(a JavaScript to Ruby source code compiler). Browser communicate with WebSocket to the server. The clients transparently access the server-side objects through the distributed objects. Also, by sharing the server-side objects among multiple clients, it can be applied to collaborative applications like Google Apps. This talk will explain the implementation of dRuby on Opal and demonstrate the collaborative application.

- title: Compacting GC in MRI
  raw_title: "[JA] Compacting GC in MRI / Aaron Patterson @tenderlove"
  speakers:
    - Aaron Patterson
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  slides_url: https://speakerdeck.com/tenderlove/building-a-compacting-gc
  video_id: AuuYQaoqr24
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/tenderlove.html

    We will talk about implementing a compacting GC for MRI. This talk will cover compaction algorithms, along with implementation details, and challenges specific to MRI.

- title: Lightning Talks
  raw_title: "[EN][JA] Lightning Talks"
  speakers:
    - Hiroshi Kawada
    - Tatsuhiro Ujihisa
    - Kazuhiro NISHIYAMA
    - Tomohiro Hashidate
    - kinoppyd
    - Hiroyuki Sano
    - Yuki Nakata
    - Urabe Shyouhei
    - Satoshi Namai
    - miyohide
    - Takeshi Watanabe
    - Takashi Kokubun

  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 5vcv3s7cEeE
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/lt/

    - 0:42
       - Implementation of Web Standards in Mastodon / Hiroshi Kawada @_furoshiki
       - https://youtu.be/5vcv3s7cEeE?t=42s
    - 6:03
       - How to develop CRuby easily with Vim / Tatsuhiro Ujihisa @ujm
       - https://youtu.be/5vcv3s7cEeE?t=6m3s
    - 11:29
       - How to specify `frozen_string_literal: true`. / Kazuhiro NISHIYAMA @znz
       - https://youtu.be/5vcv3s7cEeE?t=11m29s
    - 16:30
       - Use case of Refinements with black magic / joker1007 @joker1007
       - https://youtu.be/5vcv3s7cEeE?t=16m30s
    - 21:47
       - A WebSocket proxy server of Niconico comment server by Ruby / kinoppyd @GhostBrain
       - https://youtu.be/5vcv3s7cEeE?t=21m47s
    - 26:13
       - Auto Completion in Rails::WebConsole / Hiroyuki Sano @sh19910711
       - https://youtu.be/5vcv3s7cEeE?t=26m13s
    - 30:58
       - My Challenge of embedding mruby into a bare-metal hypervisor / Yuki Nakata @chikuwa_IT
       - https://youtu.be/5vcv3s7cEeE?t=30m58s
    - 36:17
       - Glitching ruby script / Urabe, Shyouhei @shyouhei
       - https://youtu.be/5vcv3s7cEeE?t=36m17s
    - 41:17
       - DNN/GPU with Ruby / ainame @ainame
       - https://youtu.be/5vcv3s7cEeE?t=41m17s
    - 46:33
       - Migration from hiki to markdown in Rubima / みよひで @miyohide
       - https://youtu.be/5vcv3s7cEeE?t=46m33s
    - 51:53
       - Independence of mruby. / Takeshi Watanabe @take-cheeze
       - https://youtu.be/5vcv3s7cEeE?t=51m53s
    - 57:16
       - LLVM-based JIT compiler for CRuby / Takashi Kokubun  @k0kubun
       - https://youtu.be/5vcv3s7cEeE?t=57m16s

- title: Type Checking Ruby Programs with Annotations
  raw_title: "[EN] Type Checking Ruby Programs with Annotations / Soutaro Matsumoto @soutaro"
  speakers:
    - Soutaro Matsumoto
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: JExXdUux024
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/soutaro.html

    Type inference for Ruby programs is really difficult, and no one on earth has implemented successfully yet.

    Q: What if we write type annotations?
    A: Much easier, but it is still not trivial.

    I will explain why they are difficult, how we can have a practical type checker for Ruby, and how the programming experience will be with types.

- title: Fiber in the 10th year
  raw_title: "[JA] Fiber in the 10th year / Koichi Sasada @ko1"
  speakers:
    - Koichi Sasada
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: pgFx8DFjN8M
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/ko1.html


    10 years ago I introduced new class Fiber into Ruby 1.9 as (semi-)coroutine.

    Fiber is a powerful tool to make generators and self managing context switching scheduler. Recently we receive a new proposal "auto-Fiber" to use Fiber aggressively in asynchronous operations.

    In this talk, I will introduce a Fiber itself and a brief histroy of Fiber implementations. What is coroutine and semi-coroutine? Why we need to require 'fiber' library to use Fiber#transfer? How to implement fibers and how to speed up them? Also I introduce new proposal "auto-Fiber" and this discussion.

- title: Ruby Committers vs the World
  raw_title: "[JA] Ruby Committers vs the World"
  speakers:
    - Ruby Committers # TODO: list each person
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: Vw36kmRmH5I
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/rubylangorg.html

    Live discussions and Q&A from the Ruby Core team

- title: Automated Type Contracts Generation for Ruby
  raw_title: "[EN] Automated Type Contracts Generation for Ruby / Valentin Fondaratov @rubymine"
  speakers:
    - Valentin Fondaratov
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: JS6m2gke0Ic
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/rubymine.html

    Beauty and power of Ruby and Rails pays us back when it comes to finding bugs in large codebases. Static analysis is hindered by magic DSLs and patches. We may annotate the code with YARD which also enables improved tooling such as code completion. Sadly, the benefits of this process rarely compensate for the effort.

    In this session we’ll see a new approach to type annotations generation. We'll learn how to obtain this data from runtime, to cope with DSLs and monkey patching, propose some tooling beyond YARD and create contracts like (String, T) - T

    YARV hacking and minimized DFAs included.

- title: "JRuby at 15 Years: Meeting the Challenges"
  raw_title: "[EN] JRuby at 15 Years: Meeting the Challenges / Charles Nutter @headius, Thomas E Enebo @tom_enebo"
  speakers:
    - Charles Nutter
    - Thomas E Enebo
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: rkvrikvoYPQ
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/headius.html

    JRuby has evolved a lot over 15 years. We've met challenges of performance, native integration, and compatibility. What will we face in the future? In this talk we'll discuss today's JRuby challenges: startup time, code size, type specialization, and tooling. JRuby is the most-used alternative Ruby, and with your help we'll continue to make it the best way to run your Ruby apps.

- title: An introduction and future of Ruby coverage library
  raw_title: "[JA] An introduction and future of Ruby coverage library / Yusuke Endoh @mametter"
  speakers:
    - Yusuke Endoh
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: zkP8pXOpiH0
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/mametter.html

    Are you using code coverage? As Ruby is a dynamic language and there is no standard static code checker yet, a good test suite is crucial to write a production-level Ruby code. Code coverage is a measure of test goodness. Therefore, it is also important to (properly) use code coverage to take a hint about whether your test suite is good enough or not yet (and if any, which modules are not tested well). We talk an introduction to code coverage, types and usage of code coverage, the current status of Ruby coverage library, and some planned improvements towards Ruby 2.5.

- title: Do Androids Dream of Electronic Dance Music?
  raw_title: "[EN] Do Androids Dream of Electronic Dance Music? / Julian Cheal, Eric Weinstein"
  speakers:
    - Julian Cheal
    - Eric Weinstein
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: OfDBRfmVFHk
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/juliancheal.html

    AI is everywhere in our lives these days: recommending our TV shows, planning our car trips, and running our day-to-day lives through artificially intelligent assistants like Siri and Alexa. But are machines capable of creativity? Can they write poems, paint pictures, or compose music that moves human audiences? We believe they can! In this talk, we’ll use Ruby and cutting-edge machine learning tools to train a neural network on human-generated Electronic Dance Music (EDM), then see what sorts of music the machine dreams up.

- title: "Improve extension API: C++ as better language for extension"
  raw_title: "[JA] Improve extension API: C++ as better language for extension / Kouhei Sutou @ktou"
  speakers:
    - Kouhei Sutou
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: gfoizFzJ-oI
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/ktou.html

    This talk proposes better extension API.

    The current extension API is C API. In the past, some languages such as Rust (RubyKaigi 2015), Go (Oedo RubyKaigi 05), rubex (RubyKaigi 2016) were proposed as languages to write extension.

    This talks proposes C++ as a better language for writing extension. Reasons:

    - C++ API can provide simpler API than C API.
    - C++ API doesn't need C bindings because C++ can use C API including macro natively. Other languages such as Rust and Go need C bindings.
    - Less API maintenance cost. Other approaches need more works for Ruby evolution such as introduces new syntax and new API.

- title: "Bending The Curve: Putting Rust in Ruby with Helix"
  raw_title: "[EN] Bending The Curve: Putting Rust in Ruby with Helix / Godfrey Chan, Terence Lee"
  speakers:
    - Godfrey Chan
    - Terence Lee
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: M2erAV1CpRk
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/chancancode.html

    Two years ago at RubyKaigi, we demonstrated our initial work on Helix, an FFI toolkit that makes it easy for anyone to write Ruby native extensions in Rust. In this talk, we will focus on the challenges and lessons we learned while developing Helix. What did it take to fuse the two languages and still be able to take advantage of their unique features and benefits? How do we distribute the extensions to our end-users? Let's find out!

- title: Ruby Extension Library Verified using Coq Proof-assistant
  raw_title: "[JA] Ruby Extension Library Verified using Coq Proof-assistant / Tanaka Akira @tanaka_akr"
  speakers:
    - Tanaka Akira
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: berjYyI5Bys
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/tanaka_akr.html

    Ruby extension library is written in C. C is great because it is fast and easy to access low-level features of OS and CPU. However it is dangerous and error-prone: it is difficult to avoid failures such as integer overflow and buffer overrun. We explain a method to generate C functions verified using Coq proof-assistant with Coq plugins we developed. We can verify safety (absence of failures) and correctness (functions works as expected) in Coq. The generated functions can be used in Ruby extension library. This provides a way to develop trustful Ruby extension library. Supplement material: https://github.com/akr/coq-html-escape

- title: How to write synchronization mechanisms for Fiber
  raw_title: "[JA] How to write synchronization mechanisms for Fiber / Masatoshi SEKI @m_seki"
  speakers:
    - Masatoshi SEKI
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 0mDnZ0V9OSA
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/m_seki.html

    Ruby threads are amazing, but for some reason they don't seem to be very popular. So I decided I'd try experimenting with programming multiple independent execution flows in a single thread using Fibers.

    In this talk, I'll first explain an idiom for easily writing synchronization mechanisms between Fibers. Then I will explain in detail an example which combines a framework abstracting 'select' with the Fiber idiom to achieve blocking-like non-blocking IO. I'll explain this using actual code from examples of timer-based periodic processing and simple TCP/IP server programming, to an over-the-top example running WEBrick on a single thread (using Fiber to handle multiple clients synchronously). I'll also explain ways to combine this with threads.

    In the talk I'd like to present the following: * an example of select abstraction * some essential features for Fibers

- title: "Write once, run on every boards: portable mruby"
  raw_title: "[JA] Write once, run on every boards: portable mruby / Yurie Yamane @yuri_at_earth"
  speakers:
    - Yurie Yamane
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: DF4oLrc7KaE
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/yuri_at_earth.html

    In embedded programming, the development environment and libraries we use to program are different depending on hardware. So, we have to make different programs for each hardware. Would not it be nice if CRuby works on Mac and Windows, even if the hardware is different, would the same mruby program run? I have a plan off platform to make one same Ruby code run on various microcontrollers. In this session, I will introduce an example of running Ruby code on several microcomputers.

- title: Bundler 2
  raw_title: "[EN] Bundler 2 / Colby Swandale @0xColby"
  speakers:
    - Colby Swandale
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: sZX7SK3hxk4
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/0xColby.html

    The Bundler core team has been working hard on the next major release of Bundler. We'll talk about what improvements we've been making, new features & what we've removed.

- title: Ruby Language Server
  raw_title: "[JA] Ruby Language Server / Fumiaki MATSUSHIMA @mtsmfm"
  speakers:
    - Fumiaki MATSUSHIMA
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: spPAdvskyLI
  language: Japanese
  description: |-
    RubyKaigi 2017
    http://rubykaigi.org/2017/presentations/mtsmfm.html

    This talk describes a ruby language server implementation I created. I want to increase developers interested in Ruby language server because I hope it will improve Ruby development experience.

    In last year, Microsoft published Language Server Protocol. This protocol is created to communicate between editors and language servers which provide useful information for development (ex. linting, completion, method definition).

    In this talk, I'll show you why it is important to create language server for Ruby community and how it's implemented.

- title: Memory Fragmentation and Bloat in Ruby
  raw_title: "[EN] Memory Fragmentation and Bloat in Ruby / Nate Berkopec @nateberkopec"
  speakers:
    - Nate Berkopec
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: eBmM-yWPeMw
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/nateberkopec.html

    Memory is not a simple abstraction. The layers of indirection between "Object.new" and flipping a bit in RAM are numerous: the Ruby heap, the memory allocator, the kernel, the memory management unit and more. Unfortunately, all of these layers can contribute to "bad behavior", resulting in memory fragmentation and bloat. This talk examines each of the different layers of memory abstraction, and how tuning and controlling them can result in reduced memory usage in Ruby applications.

- title: Improving TruffleRuby’s Startup Time with the SubstrateVM
  raw_title: "[EN] Improving TruffleRuby’s Startup Time with the SubstrateVM / Kevin Menard @nirvdrum"
  speakers:
    - Kevin Menard
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 5Ik2qCTmeN0
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/nirvdrum.html

    We’ve solved the startup time problem in TruffleRuby! In this talk, I’ll introduce the SubstrateVM and how we make use of it to compile the Java-based TruffleRuby to a static binary and massively improve our startup time.

- title: "Busting Performance Bottlenecks: Improving Boot Time by 60%"
  raw_title: "[EN] Busting Performance Bottlenecks: Improving Boot Time by 60% / Julian Nadeau @jules2689"
  speakers:
    - Julian Nadeau
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: 8BJKrx6rsM0
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/jules2689.html

    Lengthy application boot times cause developers to quickly lose context and view applications in a negative light, which in turn costs organizations a lot of money and productivity. We found that there were a few areas that impacted boot time: compiling Ruby bytecode, serializing configurations, looking up files and constants, autoloading files, and booting Bundler. This talk focuses on our strategies and solutions which improved our boot time by 60%. Attendees will leave with knowledge of ways to find and mitigate their own startup performance bottlenecks.

- title: High Concurrent Ruby Web Development Without Fear
  raw_title: "[EN] High Concurrent Ruby Web Development Without Fear / Delton Ding @DeltonDing"
  speakers:
    - Delton Ding
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: L_DRmV3LMYA
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/DeltonDing.html

    High Concurrent Ruby Web Development Without Fear
    We've been debating on the concurrency solution of Ruby for several years. Numerous custom "evented" drivers have been built, but for most of these projects, developers are required to think in the "evented" way to get things work properly, which not only breaks the elegance of Ruby programming, but also greatly increases the complexity of the refactoring process.

    We will then think in Ruby, looking for the solution to make your whole web application "evented" with great meta-programming features of Ruby language itself. So that, you could still concentrate on your business models while programming as usual, but the performance may boost to 5 times faster or more without any hesitation.

- title: Tamashii - Create Rails IoT applications more easily
  raw_title: "[EN] Tamashii - Create Rails IoT applications more easily / Henry Tseng @lctseng"
  speakers:
    - Henry Tseng
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: g7WM6ITZYp0
  language: English
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/lctseng.html


    There is also a short demo video to help you know more about Tamashii: https://youtu.be/hH6u4sJx_L4

    Tamashii Official Website: https://tamashii.io

- title: Development of Data Science Ecosystem for Ruby
  raw_title: "[JA] Development of Data Science Ecosystem for Ruby / Kenta Murata @mrkn"
  speakers:
    - Kenta Murata
  event_name: RubyKaigi 2017
  published_at: "2017-09-18"
  video_id: U9GdgZowmGY
  language: Japanese
  description: |-
    RubyKaigi2017
    http://rubykaigi.org/2017/presentations/mrkn.html

    The importance of data analysis in business is increasing day by day. Considering the future of Ruby which is often adopted as the development of business systems, it is an urgent task to make this programming language available in datascience.

    By the appearance of PyCall, Ruby has became able to use mainstreem tools used in datascience such as pandas and matplotlib. However, in order to establish Ruby as a programming language that can be used in datascience, and to keep it in the future as well, there are many problems now, but only a very few developers are working on solving this problem.

    In this presentation, we will introduce what we'll need in the future to establish Ruby as a programming language that can be used in data science. And we'll aim to stimulate Rubyists who are interested in this field, and to activate the development of the datascience ecosystem for Ruby by encouraging development of missing tools, documentation, and reporting on feeling of use and bugs.
