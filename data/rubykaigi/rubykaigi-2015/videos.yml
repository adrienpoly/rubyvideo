---
- title: "Keynote: Ruby 2020"
  raw_title: "Ruby: 2020 - RubyKaigi 2015 Keynote"
  speakers:
    - Evan Phoenix
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: QaLvtNpoc5o
  language:
  description: http://rubykaigi.org/2015/presentations/evanphx

- title: Introducing the Crystal Programming Language
  raw_title: Introducing the Crystal Programming Language - RubyKaigi 2015
  speakers:
    - Lein Weber
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: 7dwDzlVI7OU
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/leinweber

    Developer happiness is what brought me to Ruby in the first place. And of all the new compiled languages, Crystal is the only one that shares this value. The syntax and idioms are entirely Ruby inspired.

    Although Crystal looks very similar to Ruby, there are big differences between the two. Crystal is statically typed and dispatched. While there are no runtime dynamic features, the compile-time macros solve many of the same problems.

    In this session, we’ll take a close look at these differences as well as the similarities, and what Ruby developers can learn from this exciting language.

- title: "High Performance Template Engine: Guide to optimize your Ruby code"
  raw_title: "High Performance Template Engine: Guide to optimize your Ruby code - RubyKaigi 2015"
  speakers:
    - Takashi Kokubun
    - Kohei Suzuki
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: vM9XfqlqyNw
  language:
  description:
    "http://rubykaigi.org/2015/presentations/eagletmt_k0kubun\n\nHave you
    ever thought about performance of your Ruby code? If not, you might write ineffective
    code and slow down your application. Poor performance disappoints the users of
    your app causing you to lose their confidence.\n\nIn this talk, we show the process
    of creating faster Haml implementations: Faml and Hamlit. You will see how to
    improve the performance of your code. \nWe will show you the typical structure
    of template engines first, so experience with them is not required. After this
    talk, you'll be able to optimize your application using the techniques we will
    show you."

- title: Linux loves Ruby, Ruby loves Linux - Keynote
  raw_title: Linux loves Ruby, Ruby loves Linux - RubyKaigi 2015 Keynote
  speakers:
    - KOSAKI Motohiro
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: idmfWkP5lOw
  language:
  description: http://rubykaigi.org/2015/presentations/kosaki

- title: Fast Metaprogramming with Truffle
  raw_title: Fast Metaprogramming with Truffle - RubyKaigi 2015
  speakers:
    - Kevin Menard
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: lRMWwjqbXUo
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/nirvdrum

    "Metaprogramming is a powerful technique that sets Ruby apart from other contemporary languages. It allows compact and elegant solutions to seemingly intractable problems. Serving as the foundation of some of the mostly widely used frameworks and DSLs in the Ruby ecosystem, it’s arguably the single most defining feature of Ruby. Unfortunately, that expressive power has traditionally come at the expense of performance.

    We’ll show you how JRuby+Truffle has eliminated the cost of metaprogramming so Rubyists can write idiomatic Ruby without having to worry about hidden performance trade-offs."

- title: Compiling Ruby scripts
  raw_title: Compiling Ruby scripts - RubyKaigi 2015
  speakers:
    - Koichi Sasada
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: sFfwQ1-PFt0
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/ko1

    Ruby (MRI) 2.2 compiles Ruby scripts into bytecode (instruction sequences) at run time. This approach is simple, but has several problems such as overhead of compile time. We are working on making an Ahead of Time compiler which compiles Ruby script before executing the script. This compiler will help to reduce boot time and to reduce memory consumption on multiple Ruby processes. In this presentation, we will introduce the compiler and that mechanism.

- title: Turbo Rails with Rust
  raw_title: Turbo Rails with Rust - RubyKaigi 2015
  speakers:
    - Yehuda Katz
    - Godfrey Chan
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: uiNpoDB4dA0
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/wycats_chancancode

    Ruby is not the fastest language in the world, there is no doubt about it. This doesn't turn out to matter all that much – Ruby and its ecosystem has so much more to offer, making it a worthwhile tradeoff a lot of the times.

    However, you might occasionally encounter workloads that are simply not suitable for Ruby. In this talk, we will explore building a native extension with Rust to speed up parts of Rails. (No prior experience with Rust required!) What does Rust has to offer in this scenario over plain-old C? Let's find out!

- title: "Time flies like an arrow; Fruit flies like a banana: Parsers for Great Good"
  raw_title: "Time flies like an arrow; Fruit flies like a banana: Parsers for Great Good - RubyKaigi 2015"
  speakers:
    - Hsing-Hui Hsu
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: a_mJIR0Rk9U
  language:
  description:
    "http://rubykaigi.org/2015/presentations/SoManyHs\n\nWhen you type
    print \"Hello, world!\", how does your computer \nknow what to do? Humans are
    able to naturally parse spoken language by \nanalyzing the role and meaning of
    each word in context of its \nsentence, but we usually take for granted the way
    computers make sense \nof the code we write.\n\nBy exploring the way our brains
    construct grammars to parse sentences, \nwe can better understand how parsers
    are used for computering -- \nwhether it be in the way Ruby and other languages
    are implemented or \nin webserver routing -- and recognize when they may be the
    right tool \nto use in our own code."

- title: The history of testing framework in Ruby
  raw_title: The history of testing framework in Ruby - RubyKaigi 2015
  speakers:
    - Kouhei Sutou
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: g33d9SSbvd8
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/kou

    This talk describes about the history of testing framework in Ruby.

    Ruby 2.2 bundles two testing frameworks. They are minitest and test-unit. Do you know why two testing frameworks are bundled? Do you know that test-unit was bundled and then removed from Ruby distribution? If you can't answer these questions and you're interested in testing framework, this talk will help you.

    This talk describes about the history of bundled testing framework in Ruby and some major testing frameworks for Ruby in chronological order.

- title: The worst Ruby codes I've seen in my life
  raw_title: The worst Ruby codes I've seen in my life - RubyKaigi 2015
  speakers:
    - Fernando Hamasaki de Amorim
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: jLAFXQ1Av50
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/prodis

    Most applications written in Ruby are great, but also exists evil code applying WOP techniques. There are many workarounds in several programming languages, but in Ruby, when it happens, the proportion is bigger. It's very easy to write Ruby code with collateral damage.

    You will see a collection of bad Ruby codes, with a description of how these codes affected negatively their applications and the solutions to fix and avoid them. Long classes, coupling, misapplication of OO, illegible code, tangled flows, naming issues and other things you can ever imagine are examples what you'll get.

- title: The future of Ruby is in motion!
  raw_title: The future of Ruby is in motion! - RubyKaigi 2015
  speakers:
    - Laurent Sansonetti
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: uzUmUmEX-Ls
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/lrz

    In this presentation we will give a quick and gentle introduction to RubyMotion, a Ruby toolchain to write cross-platform apps for iOS and Android. Then, we will cover 3 of its latest features: Apple Watch, Apple TV and a cross-platform game engine. We will do live demos and coding.

- title: Writing web application in Ruby
  raw_title: Writing web application in Ruby - RubyKaigi 2015
  speakers:
    - youchan
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: xEK1hg8noSc
  language:
  description:
    "http://rubykaigi.org/2015/presentations/youchan\n\nDoes this happen
    to you? \nYou were developing web application with Ruby on Rails, but somehow
    you ended up writing front-end in JavaScript. \nRuby on Rails seemed very cool
    to me! And Rubyists are always happy to build applications with it! \nHowever,
    front-end development is becoming important today. \nThen I found Opal, and my
    dream of writing Ruby on the front-end is possible! \nRecently, React.js, a kind
    of Virtual DOM, has become very popular in the front-end community. \nIt's not
    only intended for front-end web, there is also ReactNative for other platforms
    too. \nI think many Rubyists are still lost, so I created a Virtual DOM implementation
    in Ruby called Hyalite. \nAll right, Opal, Hyalite ... tools have been gathered.
    Let's build web applications on server-side and front-end with Ruby!"

- title: Plugin-based software design with Ruby and RubyGems
  raw_title: Plugin-based software design with Ruby and RubyGems - RubyKaigi 2015
  speakers:
    - Sadayuki Furuhashi
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: C6SP3CzCb5k
  language:
  description:
    "http://rubykaigi.org/2015/presentations/frsyuki\n\nPlugin architecture
    is known as a technique that brings extensibility to a program. Ruby has good
    language features for plugins. RubyGems.org is an excellent platform for plugin
    distribution. However, creating plugin architecture is not as easy as writing
    code without it: plugin loader, packaging, loosely-coupled API, and performance.
    Loading two versions of a gem is a unsolved challenge that is solved in Java on
    the other hand. \nI have designed some open-source software such as Fluentd and
    Embulk. They provide most of functions by plugins. I will talk about their plugin-based
    architecture."

- title: Experiments in sharing Java VM technology with CRuby
  raw_title: Experiments in sharing Java VM technology with CRuby - RubyKaigi 2015
  speakers:
    - Matthew Gaudet
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: EDxoaEdR-_M
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/MattStudies

    What happens you have a virtual machine full of powerful technology and you start pulling out the language independent parts, with plans to open source these technologies?

    You get the ability to experiment! This talk covers a set of experiments where IBM has tested out language-agnostic runtime technologies inside of CRuby, including a GC, JIT and more-- all while still running real Ruby applications, including Rails.

    We want to share results from these experiments, talk about how we connected to CRuby, and discuss how this may one day become a part of everyone's CRuby.

- title: Lightning Talks
  raw_title: Lightning Talks - RubyKaigi 2015
  speakers:
    - Juanito Fatas
    - Kouta Kariyado
    - Yuki Kurihara
    - Arkadiusz Turlewicz
    - zunda
    - Takashi Kokubun
    - namusyaka
    - Lin Yu Hsiang
    - Tomohiro Hashidate
    - Tadashi Saito
    - Pilar Andrea Huidobro Peltier
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: Yf7l4Yp461I
  language:
  description: http://rubykaigi.org/2015/presentations/lt

- title: "TRICK 2015: The second Transcendental Ruby Imbroglio Contest for RubyKaigi"
  raw_title: "TRICK 2015: The second Transcendental Ruby Imbroglio Contest for RubyKaigi - RubyKaigi 2015"
  speakers:
    - Yusuke Endoh
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: dmHqtr_GNtg
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/trick

    The result presentation of TRICK 2015, an esoteric Ruby programming contest, will take place. You can (perhaps) enjoy some winning entries of unearthly Ruby code selected by esoteric judges.

- title: Ruby meets Go
  raw_title: Ruby meets Go - RubyKaigi 2015
  speakers:
    - Masaki Matsushita
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: xIVrUWmmass
  language:
  description:
    "http://rubykaigi.org/2015/presentations/mmasaki\n\nIn this talk, I
    will present how to extend your Ruby code with Golang. \nSince Go 1.5, you can
    build C compatible binaries by using buildmode c-shared/c-archive. This is a very
    exciting feature for rubyists. \nFirst, I'd like to show you how to use Go code
    from Ruby with FFI and fiddle.\nThen, I will talk about how to build gems with
    Golang."

- title: Ruby and PostgreSQL, a love story
  raw_title: Ruby and PostgreSQL, a love story - RubyKaigi 2015
  speakers:
    - Franck Verrot
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: bchlcxAZ9tU
  language:
  description: |-
    PostgreSQL 9.1 introduced Foreign Data Wrappers, as an implementation of SQL/MED foreign tables, to provide transparent access to external data. Restricted to being written in C, writing FDWs can be a hard task.

    In this talk we will learn just enough of mruby's (the ISO-compliant version of Ruby) internals to understand how one can embed mruby in an external program (like PostgreSQL), and start writing Foreign Data Wrappers in Ruby.

- title: Saving people from typos
  raw_title: Saving people from typos - RubyKaigi 2015
  speakers:
    - Yuki Nishijima
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: b9621w7_vxc
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/yuki24

    Whenever you make a typo on Google or a git … cmd, they’ll automagically correct it for you. It’s great, but have you ever wondered why programming languages don’t have such a cool feature? The next major version of Ruby will! The did_you_mean gem was built to add on a “Did you mean?” experience and Ruby 2.3 will ship with it.

    So what does the whole story look like? How can you use it in your app or gem? How does it correct typos? What even is a typo?

    Let's learn how to take advantage of this new feature in Ruby 2.3 and save ourselves from typos forever!

- title: Request and Response
  raw_title: Request and Response - RubyKaigi 2015
  speakers:
    - Aaron Patterson
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: 0cmXVXMdbs8
  language:
  description:
    "http://rubykaigi.org/2015/presentations/tenderlove\n\nWhat goes in
    to a request and response in a Rails application? Where does the \napplication
    get its data, and how does that data get to the client when you are \ndone? In
    this talk we'll look at the request and response lifecycle in Rails. \nWe'll start
    with how a request and response are serviced today, then move on \nto more exciting
    topics like adding HTTP2 support and what that means for\ndeveloping Rails applications."

- title: Let's make a functional language!
  raw_title: Let's make a functional language! - RubyKaigi 2015
  speakers:
    - Yutaka HARA
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: NNsX92hKirM
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/yhara

    Recently, functional programming with type inference has become popular, let's try to make it! But what if you don't know where to start...? For such a Rubyist, this talk will explain from basics of language implementation to the Hindley-Milner type inference. We can make a functional language!

- title: mruby on the minimal embedded resource
  raw_title: mruby on the minimal embedded resource - RubyKaigi 2015
  speakers:
    - Shota Nakano
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: EXvDKb2LTYM
  language:
  description:
    "http://rubykaigi.org/2015/presentations/shotantan\n\nIntroducing how
    mruby comes to term with the embedded board's poor resource. \nI suggest a solution
    that they can mount an external NOR Flash chip as RAM cache. \nAlthough mruby
    is a minimal implementation of Ruby, it requires huge RAM as is Embed field. A
    lot of embedded board has poor RAM less than 128KB, except for rich embedded board,
    like Raspberry Pi. \nAn external NOR Flash as mruby RAM cache is cheap solution.
    Typically, NOR Flash's writing frequency is limited, 100 thousand times. I also
    introduce performance measurement to reduce mruby RAM writting."

- title: Building CLI Apps for Everyone
  raw_title: Building CLI Apps for Everyone - RubyKaigi 2015
  speakers:
    - Terence Lee
    - Zachary Scott
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: EhEWn5Uudow
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/hone02_zzak

    Many projects rely on command-line tools to provide an efficient and powerful interface to work.

    Building tools for everyone can be difficult, because of conflicting environment or OS.

    How can we build command-line apps that work for everyone and still write Ruby?

    This talk will discuss how to use mruby-cli to build cross-platform apps in Ruby.

    Our goal will be to build a CLI app using mruby and produce a self-contained binary that can be shipped to end users.

    Since mruby is designed to be embedded and statically compiled, it's also really good at packaging ruby code.

- title: Ruby Committers vs the World
  raw_title: Ruby Committers vs the World - RubyKaigi 2015
  speakers:
    - Ruby Committers # TODO: list each person
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: LcXKSHsniTY
  language:
  description: http://rubykaigi.org/2015/presentations/committers

- title: Refinements - the Worst Feature You Ever Loved
  raw_title: Refinements - the Worst Feature You Ever Loved - RubyKaigi 2015
  speakers:
    - Paolo "Nusco" Perrotta
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: _gLgE3c5jTU
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/nusco

    Refinements are cool. They are the biggest new language feature in Ruby 2. They help you avoid some of Ruby's most dangerous pitfalls. They make your code cleaner and safer.

    Oh, and some people really hate them.

    Are Refinements the best idea since blocks and modules, or a terrible mistake? Decide for yourself. I'll tell you the good, the bad and the ugly about refinements. At the end of this speech, you'll understand the trade-offs of this controversial feature, and know what all the fuss is about.

- title: It's dangerous to GC alone. Take this!
  raw_title: It's dangerous to GC alone. Take this! - RubyKaigi 2015
  speakers:
    - Robert Young
    - Craig Lehmann
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: nhqNaZxHbHY
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/youngrw_CraigLehmann

    Every language community implements the same core components. Things like garbage collection, just-in-time compilation and threading. Wouldn't it be great if these were shared between languages? An improvement to one language would mean an improvement to all.

    We’re actually doing it: open sourcing the core components of IBM’s Java Virtual Machine into an open language toolkit. Our first proof of concept language is Ruby. This talk will discuss the process and results of integrating a new garbage collector into Ruby.

- title: "Beyond Saas: Building for Enterprise"
  raw_title: "Beyond Saas: Building for Enterprise - RubyKaigi 2015"
  speakers:
    - Josh Kalderimis
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: gVm7dd2G7CQ
  language:
  description:
    "http://rubykaigi.org/2015/presentations/joshk\n\nTravis CI found itself
    growing a great SaaS product, when Enterprise users began unexpectedly asking
    to use our product on-premise. Our small team had to quickly understand:\n\nThe
    maintenance implications for different ways to package our app. \nHow to provide
    enterprise customers great support, despite the new constraints. \nHow to prioritize
    Enterprise-specific features.\n\nThis talk is the story of how we added an Enterprise
    offering to our existing hosted Continuous Integration service, the bumps we hit
    along the way, and what we would do differently now."

- title: making robots with mruby
  raw_title: making robots with mruby - RubyKaigi 2015
  speakers:
    - Yurie Yamane
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: u7WCIN5HMDI
  language: Japanese
  description:
    "http://rubykaigi.org/2015/presentations/yurie\n\nLinuxの入っているハードウェアをあえてLinuxを使わないでTOPPERS
    EV3RT というRTOS を入れたり、bare metal の状態にしてmrubyを動かします。 \n今回の対象はLEGO Mindstorms EV3とraspberry
    pi。 \nCに比べて遅いのでハードウェア制御には向かないのでは？と言われがちなmrubyを使って倒立振子の制御をします。"

- title: Rhebok, High Performance Rack Handler
  raw_title: Rhebok, High Performance Rack Handler - RubyKaigi 2015
  speakers:
    - Masahiro Nagano
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: EPxWD_2Yekg
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/kazeburo

    Rhebok is High Performance Rack Handler/Web Server. 2x performance when compared against Unicorn.

    In this presentation, I'll introduce the Rack interface spec, the architecture of widely used rack servers, and technology that supports performance of Rhebok includes prefork_engine, picohttpparser, system calls.

- title: Ruby for one day game programming camp for beginners
  raw_title: Ruby for one day game programming camp for beginners - RubyKaigi 2015
  speakers:
    - Ippei Obayashi
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: bvXYCpcOQ3E
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/ohai

    KMC, Kyoto university Microcomputer Club, a computer circle in Kyoto University, holds one day game programming camp for newcomers (undergraduate students interested in KMC and programming) in April and May to invite an enjoyable programming world.

    As you know, Ruby is one of the best languages to learn programming itself and used in the camp to build a simple game within one day. This talk provides experiences and messages coming from the events, and explains the history of frameworks used in the event. This talk give you a hint to educate beginners.

- title: DIY (Do-it-Yourself) Testing
  raw_title: DIY (Do-it-Yourself) Testing - RubyKaigi 2015
  speakers:
    - Emily Stolfo
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: MrfdHpz0-AQ
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/estolfo

    There are so many testing frameworks available to us that we sometimes overlook a completely valid, and sometimes preferable option: writing our own.

    The drivers team at MongoDB focused over the last year on conforming to common APIs and algorithms but we needed a way to validate our consistency. We therefore ended up building our own testing DSL, REST service, and individual test frameworks.

    Using these common tests and the Ruby driver's test suite as examples, this talk will demonstrate when existing test frameworks aren't the best choice and show how you can build your own.

- title: Running Ruby on Solaris
  raw_title: Running Ruby on Solaris - RubyKaigi 2015
  speakers:
    - Naohisa Goto
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: LlcEduexIcU
  language:
  description:
    "http://rubykaigi.org/2015/presentations/ngoto\n\nI'm using Fujitsu
    SPARC Enterprise server whose OS is Oracle (former Sun) Solaris 10. In Solaris,
    there is a number of minor differences from other major OS like Linux and Mac
    OS X, and a number of changes have been made to run Ruby (CRuby) without failure.
    I'd like to talk about these changes as a user of the Solaris OS.\n\nThe following
    topics will be included in this presentation.\n\nTips to build Ruby and other
    free software on Solaris \nRecent changes to Ruby (CRuby) needed for Solaris \nBugs
    potentially affected to all platforms but revealed by running on Solaris"

- title: Pragmatic Testing of Ruby Core
  raw_title: Pragmatic Testing of Ruby Core - RubyKaigi 2015
  speakers:
    - Shibata Hiroshi
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: Tgtprqw8_IQ
  language:
  description:
    "When you need to understand a new library or framework, you might
    try to invoke the test suite with \"rake test\" or \"rake spec\". CRuby also has
    a test suite like many libraries and frameworks, written in Ruby. But, It's different
    from typical ruby libraries. Therefore many Rubyists don't know how to run the
    CRuby test suite. \nThis is because CRuby's test suite has historical and complex
    structures. In this talk, I explain the details of the CRuby test suite and protips
    for CRuby's testing technology."

- title: Charming Robots
  raw_title: Charming Robots - RubyKaigi 2015
  speakers:
    - Julian Cheal
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: t2NoXELaF0E
  language:
  description: |-
    [Due to copyright reasons, mute audio in some parts of the movie]


    http://rubykaigi.org/2015/presentations/juliancheal

    Web apps are great and everything, but imagine using Ruby to fly drones and make them dance to the sounds of dubstep! Or to control disco lights and other robots! Sounds fun, right? In this talk, we will not only explore how we can write code to make this possible, but it will also be full of exciting, interactive (and possibly dangerous ;) ) demos!

- title: Prepare yourself against Zombie epidemic
  raw_title: Prepare yourself against Zombie epidemic - RubyKaigi 2015
  speakers:
    - Christophe Philemotte
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: erx00WTzvcY
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/toch

    The news is everywhere: some weird disease makes the dead walking. We do not know yet if it is highly contagious. What should we do? What we do everyday: writing code.

    This couldn't be a better moment to use an agent based model — a technique that simulates interactions between agents in a environment to understand their effects as a whole. For such, we'll visit its minimal Ruby implementation, address some common design, simulate the Zombie epidemic, visualize it, and test different survival strategies to hopefully find the best one.

    We can code, we'll be prepared ... or not.

- title: Discussion on Thread between version 1.8.6 and 2.2.3
  raw_title: Discussion on Thread between version 1.8.6 and 2.2.3 - RubyKaigi 2015
  speakers:
    - Mayumi EMORI
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: 9C98Eyr9jOY
  language:
  description:
    "http://rubykaigi.org/2015/presentations/emorima\n\nThread in Ruby
    1.8.6 often got stuck and I had to implement my own Thread monitoring framework.
    How is it improved in the latest release, Ruby 2.2.3? Now can we use an implementation
    that I couldn't use with 1.8.6 because of the broken Thread?\n\nRuby1.8.6 のThreadはよく刺さり、自前でのThread監視機能を作成を余儀なくされた。では、最新のRuby2.2.3ではどうだろうか？
    \nまたRuby1.8.6では、Threadが高確率で刺さるために回避せざるを得なかった、あの実装方法は、Ruby2.2.3では使えるのだろうか？"

- title: Data Analytics Service Company and Its Ruby Usage
  raw_title: Data Analytics Service Company and Its Ruby Usage - RubyKaigi 2015
  speakers:
    - TAGOMORI "moris" Satoshi
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: 6qrdqLlgTo8
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/tagomoris

    This talk describes the architecture of data analytics platform service of Treasure Data, what we use Ruby/JRuby for and what we don't use Ruby for. We will discuss the many reasons, not only for productivity and performance.

    Data analytics platform architecture is very far from well-known web service architecture. There are huge scale queues, workers, schedulers and distributed processing clusters, besides well-known parts like web application servers written in RoR and RDBMSs.

- title: Actor, Thread and me
  raw_title: Actor, Thread and me - RubyKaigi 2015
  speakers:
    - Masatoshi SEKI
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: EdB-s2GX-68
  language:
  description:
    "http://rubykaigi.org/2015/presentations/seki\n\nEverybody says. Actor
    helps to solve the multithreading problem. Actor is awesome. Threads are \U0001F4A9\n\nReally?\n\nAn
    actor model is \"just a model\", just like MVC.\n\nToday, Recap what Actor Model
    is."

- title: Upcoming Improvements to JRuby 9000
  raw_title: Upcoming Improvements to JRuby 9000 - RubyKaigi 2015
  speakers:
    - Charles Nutter
    - Thomas E Enebo
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: QAqjtdExtJw
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/headius_enebo

    JRuby 9000 is here! After years of work, JRuby now supports Ruby 2.2 and ships with a redesigned optimizing runtime. The first update release improved performance and compatibility, and we've only just begun. In this talk we'll show you where we stand today and cover upcoming work that will keep JRuby moving forward: profiling, inlining, unboxing...oh my!

- title: Usage and implementation of Reish which is an Unix shell for Rubyist
  raw_title: Usage and implementation of Reish which is an Unix shell for Rubyist - RubyKaigi 2015
  speakers:
    - Keiju Ishitsuka
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: xiAyp97ElA8
  language:
  description: |-
    http://rubykaigi.org/2015/presentations/keiju

    Reish is an Unix shell for Rubyist. It was a language that was realized Ruby in the syntax of the shell. I will introduce usage and implementation of Reish.

- title: "Keynote: Ruby 3 challenges"
  raw_title: Ruby3 challenges - RubyKaigi 2015 Keynote
  speakers:
    - Yukihiro "Matz" Matsumoto
  event_name: RubyKaigi 2015
  published_at: "2015-12-11"
  video_id: E9bO1uqs4Oc
  language: Japanese
  description: http://rubykaigi.org/2015/presentations/matz
