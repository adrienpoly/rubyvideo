---
- title: "Keynote: My way with Ruby"
  raw_title: "[JA][Keynote] My way with Ruby / Kouhei Sutou @ktou"
  speakers:
    - Kouhei Sutou
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: d7lDhsE1jXg
  language: Japanese
  description: |-
    Here are my activities as a Rubyist:

      * Increase what Ruby can do with free software
      * Maintain libraries

    In this talk, I introduce my activities.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/ktou

- title: "Keynote: Keynote"
  raw_title: '[JA][Keynote] Keynote / Yukihiro "Matz" Matsumoto @yukihiro_matz'
  speakers:
    - Yukihiro "Matz" Matsumoto
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: zb8dXWYUX10
  language: Japanese
  description: RubyKaigi 2018 https://rubykaigi.org/2018/presentations/yukihiro_matz

- title: "Keynote: Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby"
  raw_title: "[EN][Keynote] Parallel and Thread-Safe Ruby at High-Speed with TruffleRuby / Benoit Daloze @eregontp"
  speakers:
    - Benoit Daloze
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: mRKjWrNJ8DI
  language: English
  description: |-
    Array and Hash are used in every Ruby program. Yet, current implementations either prevent the use of them in parallel (the global interpreter lock in MRI) or lack thread-safety guarantees (JRuby raises an exception on concurrent Array#). Concurrent::Array from concurrent-ruby is thread-safe but prevents parallel access.

    This talk shows a technique to make Array and Hash thread-safe while enabling parallel access, with no penalty on single-threaded performance. In short, we keep the most important thread-safety guarantees of the global lock while allowing Ruby to scale up to tens of cores!

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/eregontp

- title: Deep into Ruby Code Coverage
  raw_title: "[EN] Deep into Ruby Code Coverage / Marc-André Lafortune @malafortune"
  speakers:
    - Marc-André Lafortune
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: HWj3nrvAmRM
  language: English
  description: |-
    Code coverage is an easy way to measure if we have enough tests, yet many of us have yet to use it.
    This talk delves into the benefits of meaningful code coverage and how to avoid some of its pitfalls with a new tool called DeepCover.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/malafortune

- title: Devly, a multi-service development environment
  raw_title: "[EN] Devly, a multi-service development environment / Eric Hodel @drbrain, Ezekiel Templin @ezkl"
  speakers:
    - Eric Hodel
    - Ezekiel Templin
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: rlZR9jXmvL4
  language: English
  description: |-
    Writing a system alone is hard. Building many systems with many people is harder.
    As our company has grown, we tried many approaches to user-friendly, shared development environments and learned what works and what doesn't. We incorporated what we learned into a tool called devly. Devly is used to develop products at Fastly that span many services written in different languages.

    We learned that the design of our tools must be guided by how teams work and communicate. To respond to these needs, Devly allows self
    -service, control, and safety so that developers can focus on their work.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/drbrain

- title: "IRB Reboot: Modernize Implementation and Features"
  raw_title: "[EN] IRB Reboot: Modernize Implementation and Features / ITOYANAGI Sakura @aycabta"
  speakers:
    - ITOYANAGI Sakura
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: zUBxip-bhJA
  language: English
  description: |-
    IRB was written at 20 years ago and contains Ruby code parser by pure Ruby. The parser is contributing greatly to some Ruby tools over
     many years but the maintenance cost for new Ruby syntax continues to increase. IRB must parse Ruby code certainly for when should evaluate the code. I provide a solution for it. Ruby 1.9 or later has two big new features for this problem, `Ripper` and `RubyVM::InstructionSequence.compile`. The two features provide whether code piece continues by tokens information and syntax check.

    After IRB implementation was modernized, I added some new features to IRB. IRB imports RDoc features as a library, such as show documentation with auto-complete, auto-complete for meta-programmed namespaces.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/aycabta

- title: LuaJIT as a Ruby backend.
  raw_title: "[JA] LuaJIT as a Ruby backend. / Takeshi Watanabe @take-cheeze"
  speakers:
    - Takeshi Watanabe
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: F-lZtxewCcs
  language: Japanese
  description: |-
    LuaJIT is an excellent implementation of Lua with JIT.
    It also provides JIT modules that can be reused in other language.
    In this session I will talk experience using LuaJIT as mruby backend.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/take-cheeze

- title: How happy they became with H2O/mruby, and the future of HTTP
  raw_title: "[JA] How happy they became with H2O/mruby, and the future of HTTP / @i110, Kazuho Oku @kazuho"
  speakers:
    - "i110"
    - Kazuho Oku
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: r9zNEY6KtkI
  language: Japanese
  description: |-
    Are you suffering from your messy web server config files? Do you have a craving for maintainability and flexibility, but worry about performance? This talk introduces a real migration story from nginx to H2O in a large-scale photo sharing service, illustrating how mruby scripting makes it easier to write and maintain configurations. We'll see real configuration examples, some issues we faced and the final result with some benchmarks. In addition, I'll show a lot of shiny new features and mrbgems added recently. You'd be surprised how advanced things can be done with H2O and mruby!
    In the talk, Kazuho Oku will also discuss the standardization of H2 extensions, QUIC, and how they are likely to affect web application development and deployment.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/i110

- title: Design pattern for embedding mruby into middleware
  raw_title: "[JA] Design pattern for embedding mruby into middleware / MATSUMOTO, Ryosuke @matsumotory"
  speakers:
    - MATSUMOTO Ryosuke
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: xXvaY-xpfpc
  language: Japanese
  description: |-
    mruby released in 2012 and 6 years have passed.
    I have embedded mruby into a lot of middleware like ngx_mruby, and have designed and implemented both extensibility and performance compatibility in middleware.
    I want to share not only the specifications and background but also design and implementation that only I know for embedding mruby into middleware since I have been sending patches of specifications and features to mruby.
    In this presentation, I generalize the design and implementation to connect middleware supporting Internet service with mruby and introduce it as a design pattern.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/matsumotory

- title: "Reirb: Reborn Irb"
  raw_title: "[JA] Reirb: Reborn Irb / Keiju Ishitsuka @keiju"
  speakers:
    - Keiju Ishitsuka
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: zGbmD7LQP2s
  language: Japanese
  description: |-
    Reirb is a reborn irb, which interactive ruby language.
    It is a high-functional shell language with ruby's syntax.
    Its feature are job control, multiline-editor, smart-completion, language-navigation functionalities, etc.
    Everyone will be able to live more enjoyable Ruby-life by using Reirb.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/keiju

- title: JRuby 9.2 and Rails 5.x
  raw_title: "[EN] JRuby 9.2 and Rails 5.x / Thomas E Enebo @tom_enebo"
  speakers:
    - Thomas E Enebo
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: ue5XVN0SJEw
  language: English
  description:
    "JRuby 9.2 has been released. 9.2 supports Ruby 2.5 compatibility and
    it also runs Rails 5.x well. This talk will discuss some of the more interesting
    apects of JRuby 9.2:\n\n  - Performance updates\n    - Graal integration\n    -
    IR instr refactoring\n    - Object shaping\n  - Full encoding support ( @@かいぎ
    ||= $\U0001F43B\U0001F33B.send :┬─┬ノº_ºノ' )\n  - Improved Windows support\n\nIt
    will also give an update on the state of running Rails 5.x on JRuby. This talk
    will go over updates we have made to ActiveRecord-JDBC and show a real world use-case
    of getting Discourse running. Get up to date on the state of JRuby!\n\nRubyKaigi
    2018 https://rubykaigi.org/2018/presentations/tom_enebo"

- title: High Performance GPU computing with Ruby
  raw_title: "[EN] High Performance GPU computing with Ruby / Prasun Anand @prasun_anand"
  speakers:
    - Prasun Anand
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: LP9lIqCAbFE
  language: English
  description: |-
    Ruby being so old and a mature programming is still not preferred for Scientific Computing, mostly because it can’t handle large datasets.
    RbCUDA and ArrayFire gem, that I created have an outstanding performance and can handle real world problems by crunching huge datasets.
    In this talk I would like to show how RbCUDA and ArrayFire help you easily accelerate your code.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/prasun_anand

- title: How to get the dark power from ISeq
  raw_title: "[JA] How to get the dark power from ISeq / Yoh Osaki @youchan"
  speakers:
    - Yoh Osaki
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: zTO2t24IhgI
  language: Japanese
  description: |-
    ISeq is a cross-section of the Ruby interpreter.
    If there is a parser that generates ISeq, it can run languages other than Ruby. If there is a processing system that interprets iSeq,
    it may be possible to run Ruby on other than MRI's supporting platform.
    Java is actively carrying out such things by disclosing the Virtual Machine specification. For example, Scala is the language running
    on JavaVM, and there are many versions of JavaVM for various platforms.
    Specifying Ruby's iSeq may be a good thing or a bad thing. Either way, it will be useful to explore its possibilities.
    In this talk, I will talk to three stances of people. The first are the most of the audiences who purely interest about hacking of ISeq.  The second are potential users of ISeq, I show hints what we should do. At last I will raise a plobrem whether ISeq should be documented to the Ruby core team.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/youchan

- title: Three Ruby performance projects
  raw_title: "[EN] Three Ruby performance projects / Vladimir Makarov @vnmakarov"
  speakers:
    - Vladimir Makarov
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: emhYoI_RiOA
  language: English
  description: |-
    There are many ways to improve performance of a serious program like CRuby.  This presentation is an illustration of this on three different size projects.

      One project is pretty small. It is to introduce a **new CRuby internal representation of IEEE 754 double precision numbers** to improve CRuby floating point performance. The second one is a medium-size **project to generate RTL from YARV instructions** and to use RTL for the interpretation and JIT compilation.  And the third one is a very ambitious project to create a **light-weight JIT** which can be used together with MJIT as a tier 1 JIT compiler or as a single JIT for mruby.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/vnmakarov

- title: The Method JIT Compiler for Ruby 2.6
  raw_title: "[JA] The Method JIT Compiler for Ruby 2.6 / Takashi Kokubun @k0kubun"
  speakers:
    - Takashi Kokubun
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: svtRUkD0ACg
  language: Japanese
  description: |-
    Did you know Ruby 2.6 will be shipped with JIT compiler? Do you know why JIT compiler makes Ruby fast?

    In this talk, you'll see how Ruby can be made faster by surprisingly short ERB code,
    and the future of Ruby's performance by method inlining.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/k0kubun

- title: Grow and Shrink - Dynamically Extending the Ruby VM Stack
  raw_title: "[JA] Grow and Shrink - Dynamically Extending the Ruby VM Stack / @sugiyama-k, @duerst"
  speakers:
    - Keita Sugiyama
    - Martin J. Dürst
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: hjTw0T220zs
  language: Japanese
  description: |-
    Currently, MRI (the reference implementation of Ruby) allocates 1MB of stack space for each thread. This is clearly sub-optimal, in particular for highly multi-threaded applications.

    We have successfully implemented dynamical stack extension for MRI, starting with a very small stack size and growing each stack only when needed.
     We will present two different implementations, one very close to the current stack structure, and one with a different stack structure. We will also explain how we made sure that our implementation is stable. On Linux, we achieve a memory reduction per thread of up to 30%, at the cost of an average speed increase (measured across all Ruby benchmarks) of 6%.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/sugiyama-k

- title: Build your own tools
  raw_title: "[JA] Build your own tools / Shugo Maeda @shugomaeda"
  speakers:
    - Shugo Maeda
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: H0mn5u28tPo
  language: Japanese
  description: |-
    Now FLOSS is so common that even Microsoft use it and develop it.  But do you have control over your tools for daily use?

    Building your own tools is the best way to develop software, and Ruby is the best language for such use.  In this talk, I introduce my own tools and my development style.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/shugomaeda

- title: Analyzing and Reducing Ruby Memory Usage
  raw_title: "[JA] Analyzing and Reducing Ruby Memory Usage / Aaron Patterson @tenderlove"
  speakers:
    - Aaron Patterson
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: ILzQYMDp18o
  language: Japanese
  description: |-
    Memory usage can be difficult to analyze.  In this presentation we will cover
    different techniques for analyzing memory usage of a Ruby process including
    in-process analysis tools as well as system level tools.  After doing memory
    analysis, we'll look at some ways to reduce overall memory used by the system.
    Attendees will leave with practical tips and tricks for memory analysis in
    their Ruby systems, as well as a better understanding of Ruby internals.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/tenderlove

- title: Ruby code from the stratosphere - SIAF, Sonic Pi, Petal
  raw_title: "[JA] Ruby code from the stratosphere - SIAF, Sonic Pi, Petal / Kenichi Kanai @kn1kn1"
  speakers:
    - Kenichi Kanai
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: amn6gHJOjIQ
  language: Japanese
  description: |-
    Last year I participated in a project called [space-moere](http://space-moere.org/) of [SIAF2017](http://siaf.jp/en/) (Sapporo International Art F
    estival 2017). In the project we received [Sonic Pi](http://sonic-pi.net/) code generated in the stratosphere and had live performance using it. F
    or the live performance, I made a small language called [Petal](https://github.com/siaflab/petal).

    In this session, I will talk about the topics as follows:

    * space-moere project
    * Petal
    * some projects based on it (Sonic Pi and TidalCycles)

    Session Notes: https://gist.github.com/kn1kn1/c28f8029ba5ee069d83b8b6a6c4c8543

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/kn1kn1

- title: Deep Learning Programming on Ruby
  raw_title: "[JA] Deep Learning Programming on Ruby / Kenta Murata @mrkn, Yusaku Hatanaka @hatappi"
  speakers:
    - Kenta Murata
    - Yusaku Hatanaka
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: J-d_Lk4SFtQ
  language: Japanese
  description: |-
    We will present you how to program deep learning models with a practical performance by Ruby language.
    We will use Apache MXNet and Red Chainer from Ruby.  While Apache MXNet is available through pycall.rb, they will be used directly from Ruby without such bridge system in this talk.
    Our demonstrations will show you that Ruby is ready to do such tasks.

    Additionally, we will show you the latest progress and the future forecasts of the projects that aim to make Ruby available in data science field.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/mrkn

- title: All About RuboCop
  raw_title: "[EN] All About RuboCop / Bozhidar Batsov @bbatsov"
  speakers:
    - Bozhidar Batsov
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: nrHjVCuVsGA
  language: English
  description: |-
    In this talk we'll go over everything you need to know about RuboCop - a powerful Ruby static code analyzer that makes it easy for you to enforce a consistent code style throughout your Ruby projects.

    We'll begin by examining the events that lead to the creation of RuboCop, its early days and its evolution, effective RuboCop usage
    and some of its cool but little-known features. Then we'll continue with a brief look into RuboCop's internals and show you how easy it is
    to extend its functionality.

    We'll wrap the talk with a glimpse inside RuboCop's future and discuss some of the challenges the project faces and some of the work that remains
    to be done, before RuboCop finally reaches the coveted 1.0 version.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/bbatsov

- title: Hijacking Ruby Syntax in Ruby
  raw_title:
    '[JA] Hijacking Ruby Syntax in Ruby / @joker1007, Satoshi "moris" Tagomori
    @tagomoris'
  speakers:
    - Tomohiro Hashidate
    - Satoshi "moris" Tagomori
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: 04HGQEw3A6Y
  language: Japanese
  description: |-
    This talk shows how to introduce new syntax-ish stuffs using meta programming techniques and some more Ruby features not known well by many Rubyists. Have fun with magical code!

    - Show Ruby features to hack Ruby syntax (including Binding, TracePoint, Refinements, etc)
    - Describe stuffs introduced by these techniques
      - method modifiers (final, abstract, override)
      - Table-like syntax for testing DSL
      - Safe resource allocation/collection (with, defer)
    - Propose new traceable events, hooks, etc

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/joker1007

- title: TTY - Ruby alchemist’s secret potion
  raw_title: "[EN] TTY - Ruby alchemist’s secret potion / Piotr Murach @piotr_murach"
  speakers:
    - Piotr Murach
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: AeUls-THfpQ
  language: English
  description: |-
    What if you were told that there is a set of simple and potent gems developed to exponentially increase productivity when building modern terminal
     applications such as Bundler, in next to no time? Curious about how you can harness this power and become a command line applications alchemist?

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/piotr_murach

- title: Lightning Talks
  raw_title: "[EN][JA] Lightning Talks"
  speakers:
    - Tadashi Saito
    - lulalala
    - Kazuma Furuhashi
    - Shizuo Fujita
    - NAITOH Jun
    - elct9620
    - Sangyong Sim
    - Shigeru Nakajima
    - Vladimir Dementyev
    - Yoh Osaki
    - Lin Yu Hsiang
    - unak
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: hCZWrvO_27k
  language: Japanese
  description: RubyKaigi 2018 https://rubykaigi.org/2018/presentations/lt/

- title: "bancor: Token economy made with Ruby"
  raw_title: "[JA] bancor: Token economy made with Ruby / Yuta Kurotaki @kurotaky"
  speakers:
    - Yuta Kurotaki
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: gqBWoyMdn4c
  language: Japanese
  description: |-
    There is a protocol called "Bancor Protocol" which is said to bring about automation of token liquidity and transaction price finding in Smart Contract.
    To verify the usefulness of this protocol in your project, it is costly to write a smart contract program and implement the application.
    When implementing applications with Ruby, I am making gem "bancor" to easily introduce and verify the Bancor Protocol.

    In this presentation, we will talk about how developers build "token economy" on Ruby application using "bancor" and how to quickly verify effect.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/kurotaky

- title: Exploring Internal Ruby Through C Extensions
  raw_title: "[JA] Exploring Internal Ruby Through C Extensions / Emma Haruka Iwao @Yuryu"
  speakers:
    - Emma Haruka Iwao
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: Om_cm120t1E
  language: Japanese
  description: |-
    You may have wondered how Ruby objects are represented in the CRuby code. Not really? I would say writing a C extension is a great way to explore and learn how CRuby handles different object types. This session will re-implement our own Hash class, explain basic types in the CRuby, compare performance between native Hash, pure C++ implementation, and the C extension version, and discuss memory layouts and consumption in Ruby. The audience will also become more comfortable with the CRuby code through this session. Experience with C is not required.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/Yuryu

- title: Fast Numerical Computing and Deep Learning in Ruby with Cumo
  raw_title: "[JA] Fast Numerical Computing and Deep Learning in Ruby with Cumo / Naotoshi Seo @sonots"
  speakers:
    - Naotoshi Seo
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: osUvCcwMFnc
  language: Japanese
  description: |-
    Ruby is far behind than other languages such as Python in scientific computing. One reason is because there is no fast numerical library in Ruby.

    I have made a high speed numerical library for Ruby using CUDA named "Cumo". In this talk, I describe:

    * Overview of Scientific Computing in Ruby
    * Basic knowledge of GPU programming
    * Cumo inside, such as
      * Writing fast CUDA kernel
      * Implementing GPU memory pool
      * JIT compiling user-defined kernel
    * Performance comparison with Numo in an emerging DNN framework written in Ruby, red-chainer

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/sonots

- title: Karafka - Ruby Framework for Event Driven Architecture
  raw_title: "[EN] Karafka - Ruby Framework for Event Driven Architecture / Maciej Mensfeld  @maciejmensfeld"
  speakers:
    - Maciej Mensfeld
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: bzvb1u_kSro
  language: English
  description: |-
    Karafka allows you to capture everything that happens in your systems in large scale, providing you with a seamless and stable core for consuming and processing this data, without having to focus on things that are not your business domain. Have you ever tried to pipe data from one application to another, transform it and send it back? Have you ever wanted to decouple for existing code base and make it much more resilient and flexible? Come and learn about Karafka, where it fits in your existing projects and how to use it as a messages backbone for a modern, distributed and scalable ecosystem.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/maciejmensfeld

- title: RubyGems 3 & 4
  raw_title: "[JA] RubyGems 3 & 4 / Hiroshi SHIBATA @hsbt"
  speakers:
    - Hiroshi SHIBATA
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: wuyhit3-_xA
  language: Japanese
  description: |-
    The RubyGems is a mechanism to install libraries via the Internet without standard libraries. As maintenance manager of RubyGems and core member of Ruby core team, I'm working to merge the latest version of RubyGems with a latest stable version of ruby every year.

    In this presentation, I will introduce the new feature of RubyGems 2.7 and describe the mechanism of integration with Bundler. Finally, I introduce a roadmap for RubyGems 3 and 4, which is developing for Ruby 2.6 and 3 release.

    Through this talk, you will be able to enjoy the ruby world more by understanding RubyGems at the center of ruby's ecosystem.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/hsbt

- title: A parser based syntax highlighter
  raw_title: "[JA] A parser based syntax highlighter / Masataka Kuwabara @p_ck_"
  speakers:
    - Masataka Kuwabara
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: 8tarr2k0kMI
  language: Japanese
  description: |-
    | It has an elegant syntax that is natural to read and easy to write.
    | https://www.ruby-lang.org/en/

    Definitely. The syntax is elegant. But it is too complex sometimes. So, syntax highlighters for Ruby are difficult and easy to break.
    For example, probably your editor cannot correctly highlight `????::?:`, `% %s%% %%%%` or `def end(def:def def;end)end` (They are **valid** Ruby programs!).
    Yeah, it is edge cases. In real cases, some syntax highlighter cannot correctly highlight a here document.

    I'll talk a robust syntax highlighter for Ruby, it is Iro gem and Iro.vim.  The highlighter never break since it uses Ripper to highlight code.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/p_ck_

- title: What would your own version of Ruby look like?
  raw_title: "[EN] What would your own version of Ruby look like? / Stan Lo @_st0012"
  speakers:
    - Stan Lo
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: ldqb5u4pQb0
  language: English
  description: |-
    I believe most of us love Ruby, but I also believe most of us don't think Ruby is perfect. So what'd your own version of Ruby look like if you can create one?

    As some of you may know, I created a language called Goby about a year ago. It's largely inspired by Ruby, and looks very similar to it. But it also have some design choices different than Ruby or have some unique features that Ruby doesn't have.

    In this talk I'm going to discuss some important things we should focus on when designing a language. And I will al
    so share the design choices made when developing Goby, as well as the philosophy behind these choices.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/_st0012

- title: "Faster Apps, No Memory Thrash: Get Your Memory Config Right"
  raw_title: "[EN] Faster Apps, No Memory Thrash: Get Your Memory Config Right / Noah Gibbs @codefolio"
  speakers:
    - Noah Gibbs
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: Z4nBjXL-ymI
  language: English
  description: |-
    The Ruby memory system can be tricky. Configuring it isn't easy. I'll show you a new simple tool to optimize your Ruby binary's memory settings.
    You'll learn about the CRuby memory resources and how you check them. Let's optimize your memory usage to keep memory small and keep garbage collection fast.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/codefolio

- title: Guild Prototype
  raw_title: "[EN] Guild Prototype / Koichi Sasada @ko1"
  speakers:
    - Koichi Sasada
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: BO8ThL2H3tc
  language: English
  description: |-
    RubyKaigi 2016, I proposed a new concurrency abstraction named Guild for Ruby 3.
    Guild will achieve safe concurrency programming and parallel computation.
    We are making prototype of Guild. This talk will introduce Guild concepts and evaluation with prototype of Guild.
    Also we are discussing about the name of "Guild" to find out the another appropriate name. I will introduce the discussion of this "naming battle".

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/ko1

- title: Architecture of hanami applications
  raw_title: "[EN] Architecture of hanami applications / Anton Davydov @anton_davydov"
  speakers:
    - Anton Davydov
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: Rcbqa0QFXJQ
  language: English
  description: |-
    The general part of any web application is business logic. Unforchanotly, it's really hard to find a framework with specific rules and explanations how to work with it. In hanami, we care about long-term maintenance that's why it's really important to us how to work with business logic.

    In my talk, I'll share my ideas how to store and work with business logic in hanami apps. We will talk about hanami, dry and some architecture ideas, like event sourcing. This talk will be interesting for any developers. If you work with other frameworks you can take these ideas and my it to your project.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/anton_davydov

- title: Controlling Droids™ with mruby & Go
  raw_title: "[EN] Controlling Droids™ with mruby & Go / Terence Lee  @hone02, Chase McCarthy @code0100fun"
  speakers:
    - Terence Lee
    - Chase McCarthy
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: NhQovmLaHfY
  language: English
  description: |-
    Ruby has never been at the forefront of dealing with robots, IoT, or other low level systems. What Ruby is great at is scripting and building DSLs. Using mruby we can leverage existing ecosystems while still using the language we love.

    In this talk, we'll deep dive into how we can execute mruby handlers inside a Go event reactor to control a Sphero R2-D2. With surprisingly few lines of code, you can coordinate motors, lights, and sound concurrently. Come learn about mruby & robotics and see the Droids™ you're looking for in action.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/hone02

- title: Improve Ruby coding style rules and Lint
  raw_title: "[JA] Improve Ruby coding style rules and Lint / Koichi ITO @koic"
  speakers:
    - Koichi ITO
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: W4ZvpNpKWXo
  language: Japanese
  description: |-
    This talk describes improving a Ruby coding style rules and Lint when using RuboCop.

    Opportunities for using static analysis tools to unify coding style within a repository are not uncommon. However, the real world is not unified by the sole coding rule
    . Even so, we can approach the coding rule that we think is better. I'd like to talk about that in this topic.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/koic

- title: It's Rubies All The Way Down
  raw_title: "[EN] It's Rubies All The Way Down / Kirk Haines @wyhaines"
  speakers:
    - Kirk Haines
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: _rwfsse7OYk
  language: English
  description: |-
    Ruby is a language with expansive capabilities. One of it's main niches is with web application work. Typically, Ruby is used exclusively in the application container/application layer, with other technologies providing the rest of the stack. Ruby can fill other roles in the application stack, though, so for fun, let's explore a stack that is composed of Ruby software from top to bottom. What would that look like? How would it perform? Why would you do this?

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/wyhaines

- title: Journey of a complex gem upgrade
  raw_title: "[EN] Journey of a complex gem upgrade / Edouard Chin @Edouard-chin"
  speakers:
    - Edouard Chin
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: Lu5aHMxldmg
  language: English
  description: |-
    Although every gem bump should be done carefully and with attention, most of the time it’s just a matter of running the `bundle update` command, look at the CHANGELOG, and maybe fix couple tests failing due to the upgrade.
    But what about upgrading a gem whom introduced a lot of breaking changes in the new version?
    The upgrade could cause hundreds if not thousands of your existing tests to fail.
    In this talk I’d like to share the different techniques and strategies that will allow you to upgrade any dependency smoothy and safely.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/Edouard-chin

- title: Scaling Teams using Tests for Productivity and Education
  raw_title: "[EN] Scaling Teams using Tests for Productivity and Education / Julian Nadeau @jules2689"
  speakers:
    - Julian Nadeau
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: InFnu8bYi6s
  language: English
  description: |-
    As Ruby organizations scale, more developers join the team. More developers makes it increasingly difficult to enforce code styles, follow best practices, and document
    mistakes that were made without relying on word of mouth. While we have tools, such as Rubocop, to check some stylistic components, we lack tooling to document issues and best practices. This talk focuses on strategies and solutions, particularly around best practices, that we employ to help educate and accelerate nearly a thousand developers, without getting in their way, by providing them information “just in time”.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/jules2689

- title: mruby can be more lightweight
  raw_title: "[JA] mruby can be more lightweight / Yurie Yamane @yuri_at_earth"
  speakers:
    - Yurie Yamane
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: sFz5-xGTEbI
  language: Japanese
  description: |-
    mruby is called “lightweight Ruby”, but in fact it consumes rather much RAM memory.
    In this talk, I will explain a proposal of implementation to use ROM instead of RAM.  In addition, I will talk about some configurations for reducing RAM usage.
    I also demonstrate using an evaluation board (RAM:96 KB) which became available as a result of reducing RAM usage.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/yuri_at_earth

- title: Firmware programming with mruby/c
  raw_title: "[JA] Firmware programming with mruby/c / Hitoshi HASUMI @hasumon"
  speakers:
    - Hitoshi HASUMI
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: ng0N0761N3c
  language: Japanese
  description: |-
    We have a new choice to write firmware for microcomputers(microcontrollers). It's mruby/c.
    This talk shows how to introduce mruby/c firmware programming. And besides, my actual IoT project for Japanese Sake brewery will be described.
    Since mruby/c is still a young growing tool, you will know there are several(many?) things you can help it to become better.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/hasumon

- title: extend your own programming language
  raw_title: "[JA] extend your own  programming language / Masatoshi SEKI @m_seki"
  speakers:
    - Masatoshi SEKI
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: FXELyEXajD4
  language: Japanese
  description: |-
    書籍「RubyでつくるRuby」はRubyの（極小の）サブセットMinRubyをRubyで実装しながら、Rubyとプログラミング言語とインタプリタを学ぶ本です。入門者にとって、フルセットのRubyを
    改造するのはちょっと難しいですが、MinRubyのサイズならちょうどよい教材です。MinRubyを拡張し自分の言語を作ることで得られる万能感は格別です。
    本講演では、MinRubyを拡張してRuby自体に新しい機能を追加する例を紹介します。末尾呼び出し最適化、実行コンテキストの別プロセスへ移送、変数操作のフックなど、ライブラリだけ
    で実装するのは難しいRubyの変種を示します。

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/m_seki

- title: Ruby Programming with Type Checking
  raw_title: "[EN] Ruby Programming with Type Checking / Soutaro Matsumoto @soutaro"
  speakers:
    - Soutaro Matsumoto
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: QK_v0XN8kXc
  language: English
  description: |-
    Last year, I had a presentation to introduce Steep, a type checker for Ruby. However, the implementation is so experimental that it cannot be used for production at all.
    In this talk, I will report the nine months progress of the project and share the experience how the tool helps Ruby programming.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/soutaro

- title: "Ferrari Driven Development: superfast Ruby with Rubex"
  raw_title: "[EN] Ferrari Driven Development: superfast Ruby with Rubex / Sameer Deshmukh @v0dro"
  speakers:
    - Sameer Deshmukh
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: 7edbdHZvr8k
  language: English
  description: |-
    Did you ever really really want to speed up your Ruby code with C extensions but got baffled by mountains of documentation and scary C programming and chose to move to another language instead? Did you wish that you could just release that GIL and extract all the juice that your processor has to offer without losing your hair? If yes, then come see this talk!

    This talk will introduce you to Rubex, the fastest and happiest way of writing Ruby C extensions. Rubex is a whole new language designed from the ground up keeping in mind Ruby's core philosophy - make programmers happy.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/v0dro

- title: One cable to rule them all
  raw_title: "[EN] One cable to rule them all / Vladimir Dementyev @palkan_tula"
  speakers:
    - Vladimir Dementyev
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: jXCPuNICT8s
  language: English
  slides_url: https://speakerdeck.com/palkan/rubykaigi-2018-anycable-one-cable-to-rule-them-all
  description: |-
    Modern web applications actively use real-time features. Unfortunately, nowadays Ruby is rarely considered as a technology to implement yet another chat – Ruby performance leaves much to be desired when dealing with concurrency and high-loads.

    Does this mean that we should betray our favorite language, which brings us happiness, in favor of others?

    My answer is NO, and I want to show you, how we can combine the elegance of Ruby with the power of other languages to improve the performance of real-time applications.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/palkan_tula

- title: RNode with code positions
  raw_title: "[JA] RNode with code positions / Yuichiro Kaneko @spikeolaf"
  speakers:
    - Yuichiro Kaneko
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: YjmBJg52aws
  language: Japanese
  description: |-
    This talk describes about code positions on Ruby.

    Code positions are new location information of AST Nodes, introduced from Ruby 2.5.
    Code positions enable us to improve warning messages, exception messages, `Proc#source_location` and so on.

    This talk includes the following topics.

    * What code positions are.
    * Why they are needed.
    * How they are implemented.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/spikeolaf

- title: TRICK 2018 (FINAL)
  raw_title: "[JA] TRICK 2018 (FINAL) / mame & the judges"
  speakers:
    - Yusuke Endoh
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: TB-nmGG6uu0
  language: Japanese
  description: |-
    The 3rd (FINAL) Transcendental Ruby Imbroglio Contest for RubyKaigi

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/tric

- title: 20k MRuby devices in production
  raw_title: "[EN] 20k MRuby devices in production / Thiago Scalone @scalone"
  speakers:
    - Thiago Scalone
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: vMjT2DqV_vw
  language: English
  description: |-
    I've changed an entire solid runtime for mRuby, and for 3 years, even if is not recommend, we've been runnin
    g mRuby in production reaching 20k machines and billons of dollars in payment transactions. We faced a lot o
    f problems, but even more benefits adopting mRuby. This talk is about those topics, like:

    - Runtime and application Update/Upgrade
    - Communication configuration and intelligence
    - Payment transaction security and cryptography
    - Concurrency
    - Code sharing between CRuby and mRuby
    - Memory management and leaks
    - Open Source

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/scalone

- title: How Ruby Survives in the Cloud Native World
  raw_title: "[EN] How Ruby Survives in the Cloud Native World / Uchio KONDO @udzura"
  speakers:
    - Uchio KONDO
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: 7Anlio4nnng
  language: English
  description: |-
    The container orchestration technology is attracting the Ops/SRE's attention along with the gaining importance of microservices and server-less architecture. But in my opinion, around these "cloud-native" development
    s, the Ruby language shows smaller activities than other younger languages(especially Go and Rust).
    By the way, in 2016, I created a container runtime Haconiwa with mruby. In 2017, I also scratched up the containers platform for my company's web hosting service using Ruby and mruby in many components. Here in 2018,
     I'm going to create the brand-new container orchestration tool fully implemented in Ruby and mruby.
    I will talk about how I used Ruby and mruby in these container and orchestration implementations.  In addition, I will show my opinion about what kind of Ruby's features are good for these implementations, and what kind of features are required for cloud-native Ruby.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/udzura

- title: Implementing Web Console
  raw_title: "[EN] Implementing Web Console / Genadi Samokovarov @gsamokovarov"
  speakers:
    - Genadi Samokovarov
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: OCjc0RH5epY
  language: English
  description: |-
    Web Console is a debugging tool bundled with Rails. The most popular feature is a console that is shown in every development error, however, it is a general purpose debugging tool that let you execute Ruby code in any binding as it runs, through its web UI.

    In this talk, we'll take a look at how the web-console gem is implemented. This includes a deep dive into how exceptions in Ruby work; how to build Ruby bindings for every part of an exception backtrace, so we can execute code in them; how we interact with the DebugInspector and TracePoint C APIs to make this possible and how we supported alternative Ruby implementations like JRuby.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/gsamokovarov

- title: "Type Profiler: An analysis to guess type signatures"
  raw_title: "[JA] Type Profiler: An analysis to guess type signatures / Yusuke Endoh @mametter"
  speakers:
    - Yusuke Endoh
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: U6mKwwO7QCg
  language: Japanese
  description: |-
    After matz set Ruby 3 goals including static analysis, its requirements (and compromises) have been revealed gradually.  We review the current status as far as we know, briefly survey some existing proposals and implementations related to type checking for Ruby, and clarify what is good and what is missing.

    Based on this survey, we prototype a type profiler, one of the missing parts for Ruby type checking system.
     A type profiler analyzes existing Ruby programs statically and dynamically, and creates a stub of type definitions.  We discuss its design and show some experiment results.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/mametter

- title: A practical type system for Ruby at Stripe
  raw_title: "[EN] A practical type system for Ruby at Stripe. @DarkDimius @ptarjan @nelhage"
  speakers:
    - Dmitry Petrashko
    - Paul Tarjan
    - Nelson Elhage
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: eCnnBS2LXcI
  language: English
  description: |-
    Slides: https://sorbet.run/talks/RubyKaigi2018/

    At Stripe, we believe that a typesystem provides substantial benefits for a big codebase. They :

    - are documentation that is always kept up-to-date;
    - speed up the development loop via faster feedback from tooling;
    - help discover corner cases that are not handled by the happy path;
    - allow building tools that expose knowledge obtained through type-checking, such as "jump to definition".

    We have built a type system that is currently being adopted by our Ruby code at Stripe. This typesystem can be adopted gradually with different teams and projects adopting it at a different pace. We support And and OrTypes as well as basic generics. Our type syntax that is backwards compatible with untyped ruby.

    In this talk we describe our experience in developing and adopting a type system for our multi-million line ruby codebase. We will also discuss what future tools are made possible by having knowledge about types in the code base.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/DarkDimius

- title: Kiba 2 - Past, present & future of data processing with Ruby
  raw_title: "[EN]Kiba 2 - Past, present & future of data processing with Ruby Thibaut Barrère @thibaut_barrere"
  speakers:
    - Thibaut Barrère
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: fxVtbog7pIQ
  language: English
  description: |-
    Kiba ETL (http://www.kiba-etl.org) is a lightweight, generic data processing framework for Ruby, initially released in 2015 & now in v2.

    In this talk, I'll highlight why Kiba was created, how it is used for low-maintenance data preparation and processing in the enterprise (illustrated by many different use cases), why and how the version 2 (leveraging Ruby's Enumerator) brings a massive improvement in authoring reusable & composable data processing components, and why I'm optimistic about the future of data processing with Ruby.

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/thibaut_barrere

- title: Ruby Committers vs the World
  raw_title: "[JA] Ruby Committers vs the World / CRuby Committers"
  speakers:
    - Ruby Committers # TODO: list each person
  event_name: RubyKaigi 2018
  published_at: "2018-05-31"
  video_id: dhHAaybjCfE
  language: Japanese
  description: |-
    Ruby core committers on stage!

    RubyKaigi 2018 https://rubykaigi.org/2018/presentations/rubylangorg
